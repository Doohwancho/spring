
---
what is functional programming?


program = input -> computation -> output


computation 안건드리고,

input, output만 상관하는 작은 함수들을 재활용하고 엮어서 프로그램 만드는 기법.



멀티 쓰레드 환경에서 데이터의 불변성이 중요하고, 병렬처리 필요할 때 주로 사용.


---
주요 개념 



A. 순수함수: 외부에 영향 안받는 함수. 고로 side-effect 없는 함수. 고로 input, output만 신경쓰면 됨.  
if(f(x) == y{where y is result of f(x)}){
	f(x) == 'pure function' || '참조 투명하다';
}


B. 불변성: 한번 작성된 변수는 변할 수 없다. 이미 저장된 변수의 상태를 변경할 수 없다. 

oop는 접근제어자 public, private, 등을 통해 내부 필드의 접근을 통제하는데 반에,
FP에서는 데이터 제어 불가능.


Q. final로 선언만 하면 불변 되는거 아님?
-> 아님. primitive type은 안바뀌는데, final List<Integer>로 선언하면, 리스트는 안달라져도, 리스트 안의 값은 변경 가능함 -> 불변하지 않음.




C. 고차함수: 입출력으로 함수를 받는 함수. 


D. compose: 함수의 합성 (for 재사용성)

주로 작은 atomic한 함수 여러개를 조합하여 복잡한 함수를 만든다. 


f(x) = y,
g(y) = z

->

h(x) = z = g(f(x))


이걸 compose로 구현. 


ex.

function compose(f: x->y, g: y->z): x->z = {
	let h = function(x) -> {
		return g(f(x))
	}
	return h;
}




E. currying


인자가 여러개인 함수를, 인자가 하나인 함수로 쪼개는 기법.


ex. 
f(x,y) -> z 인 함수를 쪼개고 싶다면?

이걸 아래와 같이 쪼개는 방법이 currying

g(x) -> h
h(y) -> z  

therefore, g(x)(y) -> z



currying도 g(x) -> h할 때, h인 return값이 함수니까, 고차함수다. 



---
장단점

A. 장점 
1. 검증 쉬워짐
2. 명령적(imperative)로 짜지 않고, 선언적(how보다는 what위주)로 짜기 때문에, 가독성이 좋음. 
	클린 코드 짜는 습관 좋아짐. 
3. 예측 가능성 올라감. 
4. 멀티 쓰레드 환경에서 병렬처리에 좋다. 
 

B. 단점 
1. oop 개발자한테 안익숙해서 읽기 어려울 수 있다. 
2. 실행속도 느려짐 
3. 필요 메모리 늘어남


