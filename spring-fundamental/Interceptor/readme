---
Index


m-1. http request 진행 순서
m-2. interceptor vs filter
m-3. interceptor vs AOP
m-4. interceptor을 통한 간단한 인증 구현
m-5. afterCompletion()에서 예외 처리하기

---
m-1. 진행 순서


요청 -> WAS(web context) -> 필터 -> DispatcherServlet (spring context. @Bean is now accessable) -> preHandle() 인터셉터1 -> 컨트롤러 -> postHandle() 인터셉터2 -> 뷰 -> afterCompletion() 인터셉터3 -> 응답


필터는 WAS에서 실행되고(web context), 인터셉터는 DispatcherServlet에서 실행된다(spring context).
필터는 spring context 바깥이기 때문에, @Bean을 사용을 못해서,
근데 DelegationFilterProxy를 사용하면, spring context 안에서 필터를 사용할 수 있게 업데이트 되면 @Bean 사용가능하나,
관례대로,


1. preHandle()
    - 인터셉터에서 적절하지 않은 요청이라고 판단하면 거기에서 요청을 끝낼 수 있다.
2. postHandle()
    - 컨트롤러가 실행된 이후에 실행된다. 근데 이거 쓸꺼면 이거 대신 보통 aop 쓰지 않나?
3. afterCompletion()


---
m-2. interceptor vs filter



1. filter

@Override
public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
        throws IOException, ServletException {
    System.out.println("필터1");
    chain.doFilter(request, response);
}

filter는 HttpRequest가 DispatcherServlet으로 전달되기 전, tomcat(web container)에게 실행됨.
doFilter는 파라미터로 FilterChain chain을 받는데,
처리한 이후,
chain.doFilter()로 다음 체인 안에 필터로 보냄.


그리고 코드를 자세히 보면, 필터는 HttpRequest, HttpResponse 조작 가능. null을 넣는다던지. (인터셉터는 안됨)
그래서 필터는 보통
1. 보안 인증/인가 작업
2. 모든 요청에 대한 logging, 검사
3. 이미지/데이터 압축 및 문자열 인코딩
4. Spring과 무관하게 전역적으로 처리해야하는 기능들(보안검사 XSS, etc)

등, HttpRequest에 직접 관여하는 작업을 함.




2. interceptor

filter체인이 다 끝나고, HttpRequest가 web context에서 spring context로 넘어온 이후,
DispatcherServlet이 Controller을 호출하기 전, 후에 요청을 가공할 때, interceptor을 쓴다.

DispatcherServlet -> Interceptor -> Controller

이미 Security chain, filter chain 다 거치고 온 놈이라,
Principal 객체같은 애들이 다 가공된 시점이라, 가져오면 있을껄?
whereas security filter chain앞에 박아둔 custom filter는 principal 객체 없을거아냐.



Interceptor Handler의 Interface는 다음과 같다.


public interface HandlerInterceptor {

    default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
        throws Exception {

        return true;
    }

    default void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
        @Nullable ModelAndView modelAndView) throws Exception {
    }

    default void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,
        @Nullable Exception ex) throws Exception {
    }
}


1. preHandle == 컨트롤러 이전에 처리해야 하는 전처리 작업
2. postHandle == 컨트롤러 직후 후처리 작업. 특히 ModelView 객체 조작해야할 때 사용한다곤 하는데 사실 쓸 일 거의 없다. 중간에 예외 발생하면 postHandle() 호출 안함.
3. afterCompletion == finally같은 존재. 예외 발생해도 afterCompletion() 무조건 호출함.



코드를 자세히 보면, HttpRequest, HttpResponse 조작 불가능. return true나 void로 되어있잖아.
그래서 인터셉터는 주로
1. API 호출에 대한 로깅 검사
2. 컨트롤러 정보 넘겨줄 때 전처리
3. 세부적인 보안,인증,인가 공통작업
4. 다양한 목적으로 API호출에 대한 정보 기록할 때 등..

처리함.


Q. 데이터 전처리는 Filter에서 해야하나? 아니면 interceptor에서 해야하나?

A. 데이터 전처리의 경우, filter -> controller -> service -> repository 레이어로 흘러갈 때, db에 저장되는 repository layer 전에 해야하거나,
   비즈니스 로직이 처리되는 service layer전에 처리되어야 하니까, spring-context에 속하므로, interceptor로 처리하는게 적절하다고 생각합니다.



---
m-3. interceptor vs AOP

AOP에서 reflection으로 컨트롤러 처리하기 가능은한데, 번거롭잖아?
쉬운 인터셉터 쓰자.


