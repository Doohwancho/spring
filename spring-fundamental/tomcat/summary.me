
---
MVP flow-chart after B-g-1

1. Application.java
    start tomcat
2. Tomcat.java
    start Connector.java
3. Connector.java
    - 관리하는 것
        ServerSocket(port, accept_count);
        DEFAULT_PORT = 8080;
            - check port number if less than 65535
        DEFAULT_ACCEPT_COUNT = 100;
            - check current accept count is less than 100
    Server_Socket이 client에서 accept()한 Socket을 Http1Processor로 보냄
4. Http1Processor.java
    outstream에 아래의 HttpResponse를 담는다.

    final var response = String.join("\r\n",
            "HTTP/1.1 200 OK ",
            "Content-Type: text/html;charset=utf-8 ",
            "Content-Length: " + responseBody.getBytes().length + " ",
            "",
            responseBody);

    header에 Content-Type, Content-Length 있고, body에 responseBody 있다.

    outputStream.flush(); 로 스트림의 버퍼를 비우며 client Socket으로 HttpResponse를 보낸다.

    지금은 tomcat MVP라 컨트롤러고 뭐고 없어서 아직 이렇게만 구현되 있는 듯 하다.




---
project structure after B-g-3



.
├── nextstep
│        ├── Application.java
│        └── jwp
│            ├── controller
│            │       ├── ControllerAdvice.java
│            │       └── HomeController.java
│            ├── db
│            │       └── InMemoryUserRepository.java
│            ├── exception
│            │       ├── UnauthorizedException.java
│            │       └── UncheckedServletException.java
│            └── model
│                └── User.java
├── org
│        └── apache
│            ├── catalina
│            │       ├── connector
│            │       │       └── Connector.java
│            │       └── startup
│            │           └── Tomcat.java
│            └── coyote
│                ├── Processor.java
│                └── http11
│                    ├── Http11Processor.java
│                    ├── handler
│                    │       ├── HandlerResponseEntity.java
│                    │       ├── HttpRequestHandler.java
│                    │       ├── InputStreamHandler.java
│                    │       ├── RequestHandler.java
│                    │       └── RequestHandlerMapping.java
│                    ├── request
│                    │       ├── HttpRequest.java
│                    │       ├── HttpRequestHeader.java
│                    │       ├── HttpRequestLine.java
│                    │       └── QueryParameter.java
│                    ├── response
│                    │       ├── HttpResponse.java
│                    │       ├── HttpResponseHeader.java
│                    │       ├── HttpStatusLine.java
│                    │       └── ResponseEntity.java
│                    ├── servlet
│                    │       └── HttpFrontServlet.java
│                    └── util
│                        ├── HttpMethod.java
│                        └── HttpStatus.java
└── test.txt

18 directories, 28 files




새로 추가 된 것?


일단 HttpRequest, HttpResponse가 생김.

Tomcat이 만든 Socket을 원하는 도착지로 가져다 주는
RequestHandler, RequestHandlerMapping도 생김.

HttpFrontServlet는 RequestHandler를 관리하는 놈인가?
DispatcherServlet의 초기 버전인건가?

ControllerAdvice는 뭐지?
컨트롤러 전용 AOP할 떄 쓰는 놈인가?





---
flow-chart after B-g-3(mvp implemented)



A. client 요청 -> 서버의 쓰레드 생성 (중복 생략)
    1. Application
    2. Tomcat
    3. Conenctor
    4. Http1Processor


B. input stream을 HttpRequest로 포장 후, FrontServlet에게 건내줌
    5. InputStreamHandler <input stream -> HttpRequest>
        a. return HttpRequest {
            HttpRequestLine <http method, http version, path, query string 관리>
            HttpRequestHeader <input stream의 헤더 전체 관리. cookie 포함>
            readHttpRequestBody
        }
        b. HttpFrontServlet 생성 후, frontServlet.service(httpRequest);


C. FrontServlet은 해당 HttpRequest 요청을 올바른 Controller에게 찾아 전해주고 ResponseEntity를 만들어 Http11Processor에게 반환
    6. HttpFrontServlet
        return ResponseEntity {
            HandlerResponseEntity - handleRequest(httpRequest); < HttpRequest를 바탕으로 HttpResponse 생성하려고 함 (HttpStatus HttpHeader, body, resources) >
            RequestHandlerMapping - handlers.put("/", HomeController.getInstance()); < HttpRequest path에 맞는 controller 찾아주려고 하는데, >
                private static final Map<String, RequestHandler> handlers = new ConcurrentHashMap<>(); < 일단 RequestHandler 부터 찾아줌 >
                    HttpRequestHandler < 왜냐하면 모든 controller는 HttpRequestHandler를 상속받고 있고, 얜 doGet(), doPost() 를 처리하기 때문 >
                        HomeController < 여기서 "/"으로 들어온 HttpRequest에 대해 HttpResponse의 header, body에 어떤걸 넣을지 결정함 >
                            HandlerResponseEntity < HttpStatus, HttpResponseHeader, body, resource 관리>

            FrontServlet에서 받은 HttpResponse를 좀 더 가공해서 client에게 보내준다
                FileHandler < HttpResponse에서 resource를 까서 path가 static file path면, (ex. /resources/static/js/...) static file 반환. >
                ResponseEntity에서 headers.addHeader("Content-Type", "text/html"); 한 후, ResponseEntity 반환. 이 때, createTextHtmlResponse()에서 여태껏 resource였던애가 body가 된다!!
        }
        드디어 Http11Processor에 handleRequest(HttpRequest)가 끝남.

D. Http11Processor는 서버의 응답을 ResponseEntity-> HttpResponse 생성 후 outstream으로 클라이언트에게 보내기
    final HttpResponse httpResponse = HttpResponse.from(response);
    writeResponse(outputStream, httpResponse.createResponse());




---
Q. http://localhost:8080/index.html 페이지에 접근 가능하게 하기

어떻게 하면, HomeController에서 ~/resources/static/index.html 반환하게 만들지?


1. HomController에서 String resource = IOUtils.readResourceFile("/index"); 로 해당 url path에 대해 자원을 얻어 HandlerResponseEntity에 resource에 넣어 반환한다.
2. IOUtils에서는 "/index" 받은걸 해당 프로젝트의 ~/resources/static/ 파일이 있는 곳으로 안내해준다.
3. "/index"를 보고 "./tomcat/src/main/resources/static/index.html"을 찾은 후,
4. return new String(Files.readAllBytes(new File(resource.getFile()).toPath())); 로 해당 html내용을 String으로 반환해서 HandlerResponseEntity에 resource에 저장한다.



---
Q. ~/resources/ 파일 경로 찾으려면, 어떻게 해야할까?


ClassLoader classLoader = this.getClass().getClassLoader();
final String actual = Objects.requireNonNull(classLoader.getResource(fileName)).getPath(); //where fileName == "static/nextstep.txt"


원래 IOUtils에서 Controller에서 온 요청에 resource 경로 찾을 때, 절대 경로로 찾았었는데,
상대경로로 해놔야 다른 환경에 deploy했을 때 깨질 확률이 더 적을 듯






---
Q. 404 exception 어떻게 뜨는 것?

FrontServlet에서

public ResponseEntity service(final HttpRequest httpRequest) {
    try {
        final HandlerResponseEntity response = handleRequest(httpRequest);
        return createResponseEntity(response);
    } catch (final Exception exception) {
        return controllerAdvice.handleException(exception.getClass());
    }
}

ResponseEntity가 안만들어졌거나, 만들던 도중에 에러나면,
controllerAdvice.handleException(exception.getClass());

ControllerAdvice보면, 각종 CustomException이 static{} 안에 맵핑되어있고,
StatusCode에 따라 적합한 Exception을 반환하도록 되어있음.


---
Q. static file 리턴 되나?


private ResponseEntity handleRequest(final HttpRequest httpRequest)
        throws IOException {
    final String path = httpRequest.getPath();

    if (FileHandler.isStaticFilePath(path)) {
        return FileHandler.createFileResponse(path);
    }

    final HttpFrontServlet frontServlet = HttpFrontServlet.getInstance();
    return frontServlet.service(httpRequest);
}


---
Q. index.html에 담긴 static 파일들의 처리?


서버 키고 /index.html 하면,
맨 처음에 html이 반환된 이후,
서버로 요청이 7번 더 온다.

얘네들은 다른 Thread-n 으로, Controller단까지 가지 않고, isStaticFile()에 걸려서,
18:24:48.935 [Thread-6] INFO org.apache.coyote.http11.request.HttpRequestHeader - true
18:24:48.935 [Thread-6] INFO org.apache.coyote.http11.request.HttpRequestHeader - Idea-e3e12a8e=7fa16e91-e91d-4168-8bfb-f747ad3be1f4
18:24:48.941 [Thread-4] INFO org.apache.coyote.http11.response.HttpResponse - httpResponseHeader is null: false
18:24:48.941 [Thread-4] INFO org.apache.coyote.http11.response.HttpResponse - httpResponseHeader's getCookie is null: null

이런식으로 바로 자원이 반환된다.

HttpFrontServlet에서
if (FileHandler.isStaticFilePath(resourcePath)) {
    return FileHandler.createFileResponse(resourcePath);
}

여기에 걸려서,

public static ResponseEntity createFileResponse(final String resource) throws IOException {
    final URL url = FileHandler.class.getClassLoader().getResource("static" + resource);
    final Path path = Path.of(url.getPath());
    final byte[] fileBytes = Files.readAllBytes(path);

    return new ResponseEntity(OK, getFileHttpHeader(path), new String(fileBytes));
}


FileHandler에서 File.readAllBytes(path)로 ~/resources/static/ 파일 읽은 후, 바로 ResponseEntity 반환하는 듯.


이걸 총 7번 하는게 서버 로그에 감지되는데,
index.html을 뜯어보면,

<link href="css/styles.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js" crossorigin="anonymous"></script>
<script src="js/scripts.js"></script>
<script src="assets/chart-area.js"></script>
<script src="assets/chart-bar.js"></script>
<script src="assets/chart-pie.js"></script>

외부 참조하는게 총 8개가 있다.
css파일 빼고 7번인가?
css도 static파일이라 말이 안되는데?

음 근데 cdn은 서버에 요청하는게 아니라, 저 cdn서버에 요청하는거니까, 총 5개가 요청들어와야 하지 않나? 왜 7개지?



---
Q. io stream vs buffer difference?


입출력 스트림은 client->server, server->client로 단방향으로 한방에 보내는 것.
buffer는 보내기 전에, 중간단계에 잠깐 담아놨다가, 준비되면 보내는 것.

Http11Processor에 process에서 보면,

@Override
public void process(final Socket connection) {
    try (final var bufferedReader = new BufferedReader(
            new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8)); //step1) inputstream from client to buffer
         final var outputStream = connection.getOutputStream()) {
        final HttpRequest httpRequest = InputStreamHandler.createRequest(bufferedReader); //step2) buffer에 담긴 정보를 가지고 HttpRequest만들기
        final ResponseEntity response = handleRequest(httpRequest); //step3) HttpRequest에 대한 정보를 토대로 controller에서 서비스랑 지지고 볶고 해서 HttpResponse 생성
        final HttpResponse httpResponse = HttpResponse.from(response);

        writeResponse(outputStream, httpResponse.createResponse()); //step4) HttpResponse를 output stream에 담기
    } catch (final IOException | UncheckedServletException | IllegalArgumentException e) {
        log.error(e.getMessage(), e);
    }
}

private void writeResponse(final OutputStream outputStream, final String response) throws IOException {
    outputStream.write(response.getBytes());
    outputStream.flush(); //step5) output stream에 담긴 정보 전송 후, stream 비우기.
}

