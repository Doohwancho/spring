
---
objective

build WAS from scratch


---
"/" flow-chart


Q. what happen when I type "http://localhost:8080/" ?

1. WebServer 실행
    서버 소켓에 8080포트 잡고, client 요청 기다림. (이 server_socket thread는 localhost:8080에 요청 온 것 처리만 하는 스레드)
    client connection 받으면 쓰레드 하나 더 써서 소켓만들어 RequestHandler에게 넣어줌.

2. RequestHandler
    1. client에서 받은 HttpRequest 뜯어보기
        RequestLine - method: GET path: /
        headers
            Connection: keep-alive
            Cache-Control: max-age=0
            sec-ch-ua: "Google Chrome";v="105", "Not)A;Brand";v="8", "Chromium";v="105"
            sec-ch-ua-mobile: ?0
            sec-ch-ua-platform: "macOS"
            Upgrade-Insecure-Requests: 1
            User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36
            Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
            Sec-Fetch-Site: none
            Sec-Fetch-Mode: navigate
            Sec-Fetch-User: ?1
            Sec-Fetch-Dest: document
            Accept-Encoding: gzip, deflate, br
            Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
            Cookie: Idea-e3e12a8e=7fa16e91-e91d-4168-8bfb-f747ad3be1f4
        cookies
            키 : Idea-e3e12a8e, 값 : 7fa16e91-e91d-4168-8bfb-f747ad3be1f4
        parameter
            if http://localhost:8080/?id=awesome, then 파라미터 키 : id, 값 : awesome

    2. client에게 보낼 HttpResponse 만들기
        "./web-application-server/src/main/resources/" 에서 static file 찾아 요청 보낼 준비

    3. RequestMapping에게 부탁해서 -> controller에게 부탁해서 HttpResponse를 올바른 incoming-url에 매치시켜 보내주기.
        ex. localhost:8080/ -> localhost:8080/index.html
        HttpResponse.forward(uri);
            header
                Content-Type: text/html
                Content-Length
                HTTP/1.1 200 OK
            body in byte[]
                ex. index.html, hello world! -> [60, 33, 68, 79, 67, 84, 89, 80, 69, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 32, 108, 97, 110, 103, 61, 34, 101, 110, 34, 62, 10, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 85, 84, 70, 45, 56, 34, 62, 10, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 84, 105, 116, 108, 101, 60, 47, 116, 105, 116, 108, 101, 62, 10, 60, 47, 104, 101, 97, 100, 62, 10, 60, 98, 111, 100, 121, 62, 10, 32, 32, 105, 110, 100, 101, 120, 46, 104, 116, 109, 108, 33, 10, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62]

            dos.flush(); //버퍼를 비우면서, 버퍼안의 내용을 전송한다.


---
Q. /index.html 요청을 한번 보냈는데 여러 개의 추가 요청이 발생하는 이유

서버가 웹 페이지를 구성하는 모든 자원(HTML, CSS, Javascript, 이미지 등)을 한번에 응답으로 보내지 않기 때문.
응답을 받은 브라우저는 HTML 내용을 분석해 CSS, Javascript, image 등의 자원이 포함되어 있으면 서버에 해당 자원을 다시 요청함.


---
Q. Content-Type vs Accept?


what is accept?
the Accept header always indicates what kind of response from the server a client can accept.

ex.
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Encoding: gzip, deflate, br
Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7




what is content-type?


HttpRequest, HttpResponse header에 담기는 놈.
The "Content-Type" header field indicates the media type of the associated representation


리소스의 미디어 타입(MIME 타입)을 나타냄
POST, PUT 요청에서 클라이언트는 서버에게 어떤 유형의 데이터가 실제로 전송됐는지를 알려줌
GET의 경우에는 Content-Type 헤더가 불필요. URI와 쿼리 파라미터로도 충분하기 때문.
POST/PUT의 경우에는 데이터 형식이 xml, json 등 다양한 형태로 전달될 수 있기 때문에 필요.

ex.
Content-Type: text/html


---
register flow-chart


1. Webserver
    (중복 내용 위 flow-chart 참조)
2. Request Handler
    (중복 내용 위 flow-chart 참조)
    a. RequestMapping
        .put("/user/create") -> verify POST method in HttpMethod.java -> CreateUserController.java
    b. doPost || doGet(Deprecated)
        Database.java
            addUser();
        httpResponse.sendRedirect("/index.html");
    c. HttpResponse.forward("/");



---
HTTP Status Code

2XX : 성공. 클라이언트가 요청한 동작을 수신하여 이해했고 승낙했으며 성공적으로 처리
3XX : 리다이렉션. 클라이언트는 요청을 마치기 위해 추가 동작이 필요
4XX : 요청 오류. 클라이언트에 오류가 있음
5XX : 서버 오류. 서버가 유효한 요청을 명백하게 수행하지 못했음




---
login && cookie

1. http is stateless, connectionless -> 로그인 결과 기록 불가
2. cookie in header 로 http request간 데이터 공유 -> 보안 이슈 존재
3. session (grounded upon  cookie) -> 상태 데이터를 서버에 저장


`
what is cookie?

쿠키는 웹사이트 접속시 접속자의 개인장치에 다운로드 되고 브라우저에 저장되는 작은 텍스트 파일입니다.
웹사이트는 쿠키를 통해 접속자의 장치를 인식하고, 접속자의 설정과 과거 이용내역에 대한 일부 데이터를 저장합니다.
일반적으로 쿠키에는 만료일이 있습니다.
`



이 예제에서는 session과 cookie 중 cookie만 사용.

원래 브라우저에서 보내는 쿠키는
쿠키 키: Idea-e3e12a8e
쿠키 값: 7fa16e91-e91d-4168-8bfb-f747ad3be1f4


근데 로그인 성공하면,

LoginController.java 에서
httpResponse.addHeader("Set-Cookie", "logined=true");
로 쿠키를 보내주기 때문에,
로그인한 상태에서 서버에 HttpRequest보내면, 쿠키값이
쿠키 키 : logined, 값 : true
..와 같이 날아옴.

그럼 서버에서 HttpRequest를 까서
HttpRequestUtils.parseCookies(getHeader("Cookie"));
로 HttpRequestUtils.java에서 header 뜯어서 cookie 확인함.



HttpRequestUtil에서 cookie 생성. Pair로. 코드는 아래와 같음.

public static class Pair {
    String key;
    String value;

    Pair(String key, String value) {
        this.key = key.trim();
        this.value = value.trim();
    }

    public String getKey() {
        return key;
    }

    public String getValue() {
        return value;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((key == null) ? 0 : key.hashCode());
        result = prime * result + ((value == null) ? 0 : value.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Pair other = (Pair) obj;
        if (key == null) {
            if (other.key != null)
                return false;
        } else if (!key.equals(other.key))
            return false;
        if (value == null) {
            if (other.value != null)
                return false;
        } else if (!value.equals(other.value))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return "Pair [key=" + key + ", value=" + value + "]";
    }
}

key:value인 Pair이고,


쿠키는 이렇게 생김.
쿠키 키 : Idea-e3e12a8e, 값 : 7fa16e91-e91d-4168-8bfb-f747ad3be1f4

저 hashCode()안에 코드가 쿠키 암호화 알고리즘인데
이걸로 쿠키 생성하고 로그인한 유저 한해서 헤더에 넣어서 로그인 됬다는걸 확인



컨트롤러에서 view로 model에 유저 정보 담아서 보낼 때,
유저 쿠키 있으면, 로그인 권한 있는 화면 보여주고, 없으면 안보여주는 식으로
view단에서 처리하는거군.




아 ListUserController에 isLogin()에서 httpRequest.isLogin(); 하면,
아까 로그인 성공시 헤더에 담아 보냈던 "logined"라는 쿠키를
return Boolean.parseBoolean(cookies.getOrDefault("logined", "false"));
로 verify()하는 거구나.



---
cookie -> session


로그인하면 서버에서 클라이언트에게 쿠키를 준다.



RequestHandler에서 HttpResponse보낼 때, "JSESSIONID"라는 쿠키 없으면, UUID로 만들어서 보낸다.
if (request.getCookies().getCookies("JSESSIONID") == null) {
    response.addHeader("Set-Cookie", "JSESSIONID=" + UUID.randomUUID());
}

로그인 안해도 모든 유저에게 JSESSIONID를 주나?

cookie는 클라이언트에서 저장해놓고, 서버에 보낼 떄만 쓰는건데,
session은 서버에서도 저장해놓고, 클라이언트꺼 왔을 때 비교해보는거라며?
그럼 session(JSESSIONID)는 어디에 저장하나?


HttpSessions에서 세션 관리하네.
private static Map<String, HttpSession> sessions = new HashMap<String, HttpSession>();

id: HttpSession으로 관리하는 듯.
그리고 HttpSession 객체 안에는

private Map<String, Object> values = new HashMap<String, Object>();
id: session pw 로 관리하는 듯


client의 세션과 서버에서 보관하는 세션의 비교는
HttpRequest.getSession()하면,
return (HttpSession) HttpSessions.getSession(getCookies().getCookies("JSESSIONID"));
가 되서,
HttpRequest에서 "JSESSIONID"라는 이름의 쿠키를 꺼내
저 쿠키의 value를 키로 삼아
HttpSessions.getSession(); 에서


private static Map<String, HttpSession> sessions = new HashMap<String, HttpSession>();


public static HttpSession getSession(String id) {
    HttpSession session = sessions.get(id);

    if (session == null) {
        session = new HttpSession(id);
        sessions.put(id, session);
        return session;
    }
    return session;
}

여기서 session 꺼내오는 듯?


저 값이 null이 아니라면, 로그인한 유저라는 말이니까, 유저 권한을 줄 듯.
view단에서 저 권한 가진 사람만 특정 html을 보여준다거나.



