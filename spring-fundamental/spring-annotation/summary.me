===
Table of Contents


a. Controller

1. x-www-form-urlencoded -> request.getParamter()
2. plain/text (raw) -> String data
3. application/json -> @RequestBody User user
4. @PathVariable @GET("/user/{id}") -> @PathVariable id
5. @CrossOrigin
6. @Valid
7. @RequestParam
8. @RequestBody
9. @ModelAttribute


b. context

1. @Bean
2. @Configuration
3. @Component


c. cache

1. @@Cacheable
2. @CachePut
3. @CacheEvict


d. error
1. @ExceptionHandler
2. @ControllerAdvice
3. @ResponseStatus


e. domain
1. @Embedded




---
a-1. x-www-form-urlencoded 으로 보내면?


x-www-form-urlencoded => request.getParamter()

라는데, 이게 뭐지?

Postman에서 HttpRequest보낼 떄, 여러 옵션 있잖아?(raw도 있고, form-data도 있고, binary도 있고, etc)  그 중 하나.



A. UserController.save()에서,

원래는
public CommonDto<?> save(String username, String password, String phone) {}

이렇게 되어있는데, 스프링 파라미터에 일반적인 자료형으로 적혀있으면,
client->server로 HttpRequest요청 보낼 떄, x-www-form-urlencoded 이 형식으로 보내는데,
이 형식을 파싱해서, 아래에
"String username, String password, String phone"
리플렉션에서 알아서 적절한 파라미터에 값을 넣어줌.
와!

String username에 request.getParameter(username) 해서 넣어주고,
String password엔 request.getParameter(password) 해서 넣어주고,
String phone엔 request.getParameter(phone) 해서 넣어줌.



---
a-2. text/plain 으로 보내면?

만약에 Postman에서 HttpRequest를 raw로 보낸다면,
ex.
username: abc, password: abc, phone: 123

이렇게 보내면?

A. @RequestBody + String 으로 받음.

ex.
public void save(@RequestBody String data){} 로 받음.

근데, 한줄짜리 String으로 오기 때문에, 수동 파싱 해줘서 써야 함.
그래서 raw타입으로 보내지 말고, application/json로 주고받자.


---
a-3. application/json으로 보내면?


A. @RequestBody로 받는데, String 말고 Object로 받아야 함.

ex.

Postman에서 HttpRequest에 raw타입으로 보내되,

{
    "username":"cho",
    "password":"1234",
    "phone":"010-1234-1234"
}
이렇게 보내면, header가 자동으로 application/json으로 바뀜.

public void save(@RequestBody User user){}

이렇게 받음.



---
a-4. @PathVariable

@Get("/user/{id}")

에서, {} 안에 있는거 파싱해서 id만 쏙 빼옴

(@PathVariable id int)

---
a-5. @CrossOrigin


사람들이 client 브라우저단에서 js로 ajax call로 HttpRequest에 워낙 장난질 많이 하니까,
서버 내부에서 하는 거 제외하고,
서버 외부에서 자바스크립트로 HttpRequest 못하게 원천봉쇄하는게 CORS정책.


@CrossOrigin은 CORS정책 안쓰겠다는 뜻.
.html에서 $.ajax{} 로 HttpRequest 손수 만들어서 보내려고할 떄 사용.


---
a-6. @Valid

vo User를 HttpRequest, HttpResponse나,
save,update,list 등 다른 상황에서 다른 필드가 필요하고,
각 필드마다 다른 상황에서 @Valid 조건이 다르니까,
JoinReqDto, SaveReqDto 등으로 구분해서,
각각 다른 필드에 각각 다른 @Valid 넣어줌.

@Valid넣어준건 public CommonDto<?> save(@Valid @RequestBody JoinReqDto dto, BindingResult bindingResult) {}
이렇게 컨트롤러에서 받고,
@Valid 체크는 aop.BindingAdvice.validCheck()에서 함.



---
a-7. @RequestParam

@RequestParam은 1개의 HTTP 요청 파라미터를 받기 위해서 사용한다.
@RequestParam은 필수 여부가 true이기 때문에 반드시 해당 파라미터가 전송되어야 하며, 파라미터가 전송되지 않으면 400 에러가 발생한다.


---
a-8. @RequestBody

클라이언트가 전송하는 Json(application/json) 형태의 HTTP Body를 Java 객체로 변환시켜주는 역할을 한다.

ObjectMapper을 쓰는데, 내부적으로 reflection을 사용하기 때문에 User객체에 @Getter을 붙여줘야 한다.



---
a-9. @ModelAttribute

client가 form으로 보낼 때 사용.
body에 있는 정보를 파라미터에 바인딩 하기 위해 사용





---
b-1,2. @Bean & @Configuration

spring ioc container에 객체 등록하기 위해 빈 씀.
.getBean()등으로 이름을 가져오거나 id도 있고, bean 생성 때 생성자에 주입할 파라미터받는 .property도 있네.

수동으로 스프링 컨테이너에 빈을 등록하는 방법
개발자가 직접 제어가 불가능한 라이브러리를 빈으로 등록할 때 불가피하게 사용

클래스 위에 @Bean 붙여서 사용하거나,
메서드 위에 @Bean붙이려면, 해당 클래스에 @Configuration 붙여줘야 가능.
왜냐면 그냥 @Bean만 붙이면, @Bean메소드 호출마다 새로운 객체 생성해서 반환해준다고 함. @Configuration 안에 있는 @Bean은 싱글턴을 보장한다고 함.

주로 메서드나 클래스를 전역적으로 사용하고싶은때 빈 붙여주면, 프로젝트 시작한 후, reflection이 @Bean 어노테이션 붙은애들
슥 훑어서 ioc container에 객체 추가해서 관리하나봄.

spring app 시작시 log4j2의 로그레벨을 info말고 debug로 하면, 빈 등록도 주르륵 볼 수 있는거같던데.


@Configuration
public class ResourceConfig {

    @Bean
    public MangKyuResource mangKyuResource() {
        return new MangKyuResource();
    }

}

뭐 이런식으로 사용함.


---
b-3. @Component

자동으로 빈 등록하는 방법.

component scan에 적용되는 놈들 타게팅.

자식들은 @Configuration, @Controller, @Service, @Repository이 있음.



---
c-1~3 cache related

spring-cache/ 프로젝트 참조


--
c-1~3. error related

spring-annotation/ 프로젝트 참조


---
e-1. @Embedded
dto에 password를 BcryptEncryptor나 다른 관련 메서드를 Password라는 클래스 만들어서 일괄관리하고싶거나,
address1, address2, zipcode를 Address 클래스로 일괄적으로 묶어서 관리하고 싶은 경우, 사용한다.

User.java, Password.java, Address.java 참고.
더 자세한 use-case는 /jpa/spring-jpa-best-practices-cheese10yun 참고.

