---
Index



A. 요구사항 정의
B. 용어 정의
C. service.deposit();할 때, Account를 넘겨줘야 하나? 아니면 account.deposit()으로 해야하나?
D. N-tier architecture to hexagonal architecture



---
A. 요구사항 정의


Acceptance Criteria

A. 요구사항 정의

a. 은행 계좌에 돈을 입금할 수 있다. -- clear
    a-1. 입금은 한번에 한번씩만 되어야 한다.(동시에 두번 이상의 입금처리가 되면 안된다.)
b. 은행 계좌에 돈을 출금할 수 있다. -- clear
    b-1. 출금 시, 계좌에 있는 돈 이상 출금할 수 없다. -- clear




---
B. 용어 정의

1. 계좌에 돈을 입금: deposit
2. 계좌에서 돈을 출금: withdraw




---
C. service.deposit();할 때, Account를 넘겨줘야 하나? 아니면 account.deposit()으로 해야하나?


case1) Account.deposit()을 한다?

problem1) domain -> service 의존관계 생기지 않나?
problem2) Account 생성시 Service 주입 받아야 하잖아? 이게 맞아?
http request가 왔다고 쳐. deposit 하래. 로그인 되있다 쳐. 그럼 해당 유저로 일단 디비에서 Account 꺼내와야겠지?
해당 repository에서 해당 유저의 Account를 반환할 때, 서비스를 여기에 주입시킨다라.. 이게 맞나? 아닌거같은데..


case2) Account를 파라미터로 넘겨준다?
request에 {Account, depositAmount}를 담아 보내야겠다.
근데 Account를 담아야 하나? Account에 유저 정보 다 들어있는데, 필요 없잖아?
{userName, depositAmount} 를 보내야하나?
동명 이인 때문에 안되잖아?
{AccountId, depositAmount}를 보내야 겠다.




