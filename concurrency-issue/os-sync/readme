---
Index


b-1. thread
b-2. thread pool
b-3. daemon therad
b-4. race condition
b-5. deadlock
b-6. os-solution1 - hold and wait
b-7. os-solution2 - mutex
b-8. os-solution3 - semaphore
b-9. os-solution4 - monitor
b-10. java-solution1 - synchronized
b-11. java-solution2 - volatile
b-12. java-solution3 - atomic class
b-13. simple lock - class level lock vs block level lock
b-14. simple lock - Object lock



---
b-1. Thread State


a. create new Thread
	start() -> Runnable
b. Runnable (while문으로 여러 쓰레드가 한 자원에 lock권한 얻으려고 집중공격 하는 상태)
	wait()
		Runnable -> Waiting
	yield()
		해당 쓰레드는 다른 쓰레드에게 자원을 양보하게 된다.
c. Blocked (Running)
d. Waiting (한놈이 lock권한 받고 Running이니, notify()받을 떄 까지 대기하는 곳)
	notify()
		Waiting -> Runnable
	notifyAll()
		Waiting -> Runnable
e. Time-Waiting (waiting for time-out notification)

f. Terminated (Running상태에서 run()메서드 종료되면 Dead상태가 된다)


---
b-4. problem - race condition

1. 한 자원을 여러 쓰레드가 동시 참조 -> 문제 발생 농후
2. 쓰레드들이 서로 다른 값을 참조함
	Thread A,B,C가 RAM에 올라온 Process안에 똑같은 곳의 공유자원을 참조하는게 아니라, 성능 향상을 위해 RAM에서 카피해온 값을 자신의 CPU cache에 저장해 놓고 사용함.
	그래서 Thread A, C가 값을 바꾸면, Thread A.cache의 값과 Thread C.cache의 값이 다름(???)
3. 성능 저하
	num자원을 A가 쓰고 바로 제자리에 반환하는게 아니라,
	다른 여러 작업 끝나고 반환하면,
	B,C는 A가 num뿐만 아니라 다른 작업 다 끝날 때 까지 기다려야 함.
4. 서순 보장 X
	Thread C->A->B 인지, B->A->C 인지 예측 불가능
	근데 서순 필요한건 굳이 병렬처리된 멀티 쓰레드 쓰지 마 ㅋㅋ. 이건 문제가 아닌


해결 방법은 3가지.


---
b-10. Solution1. synchronized(동기화)




Q. 한 자원에 여러 쓰레드가 동시 참조하는 문제를 어떻게 해결하지?

A. Critical Section(임계 영역)을 정해주기.

임계영역: @Transactional 하는 최소단위.

Critical Section 정해주고,
Thread A가 Critical Section안에 있을 때, 다른 Thread B,C가 Critical Section안에 침범하지 못하게 보장해주

화장실에 들어갈 땐, 한번에 한놈만 들어갈 수 있어!


어떻게?

int synchronized num = 0; 하면,

num에 대해 Thread A, Thread B, Thread C가 한번에 한놈 씩 밖에 접근할 수 없다.



성능은 race condition보다는 좋으나,
volatile, Atomic Class보단 떨어지는 편.





---
b-11. Solution2. volatile



Q. Thread A,B,C가 같은 곳의 자원을 공유하는게 아니라,
그 자원을 자기의 CPU cache에 복사해와서 값을 바꿔서 생기 문제를 어떻게 해결하지?

A. Thread A,B,C를 강제로 로컬 CPU cache쓰게 하지 말고, 공유자원 한 곳에 값을 참조하도록 하자!

그게 volatile


단!
Thread A만 write하고, 나머지 Thread B,C, ...는 read only할 때에만 volatile 쓰자.

왜?
volatile은 모든 쓰레드가 공유자원을 쓰라는거지,
동시에 .write()했을 때 문제는 해결한 방법이 아니다.





---
b-12. Solution3. Atomic Class(Compare and Swap)


Thread A,B,C가 동시에 공유자원에 int num을 바꾸려고 하는데, 3놈중 한놈만 자원을 바꾸게 하고싶다. 어떻게?

CAS(compare and swap algorithm)을 사용하자!

int num = 10; 일 때,

ThreadA.set(oldVal, updateVal);
ThreadB.set(oldVal, updateVal);
ThreadC.set(oldVal, updateVal);

해서, oldVal이 10과 같으면 updateVal로 바꾸도록 하자.(이게 CAS)


ex.

int num = 10;

ThreadA.set(10, 200);
ThreadB.set(10, 300);
ThreadC.set(10, 400);


쓰레드 A,B,C가 동시에 공유자원 num에게 접근한다.
가장 먼저 도착한 ThreadB가 oldVal == 10이니까, num = 300; 한다.


int num = 300;

ThreadA.set(10, 200);
ThreadC.set(10, 400);

그럼 ThreadA,C는 oldVal인 10과 현재 공유자원의 값인 300이 다르기 때문에, .set()이 안되고 while()문에서 무한 return false loop 걸려 대기된다.




---
b-8. diff thread pool semaphore


쓰레드 풀, 세마포어 둘 다
다중 쓰레드 환경에서 동시에 쓰레드가 최대 몇개까지 실행될 수 있는지 정해주는데,

세마포어는 거기에 더 얹어서, 실행하는 도중에 추가 명령어 입력 가능.

semaphore = thread pool + aop







