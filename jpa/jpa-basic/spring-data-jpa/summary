---
Goal


jpa의 룰 파악



---
Index



0. tips from 김영한
A. 매핑 어노테이션 정리
B. 식별자 매핑 어노테이션 정리
C. 단방향 | 양방향
D. 연관관계의 주인
E. 연관관계 매핑 (1:1, 1:N, N:1, N:M)
F. N+1 problem -> Lazy Loading
G. 상속관계
    a. join 전략
    b. 단일 테이블 전략
    c. TABLE_PER_CLASS 전략(비추)
H. 영속성 컨텍스트
	a. entity lifecycle
	b. pros1. 1차 캐시
	c. pros2. LAZY Loading
	d. pros3. transactional write-behind (buffer 기능)
	e. pros4. dirty checking
	f. flush()
	g. 준영속 상태(detached state)
I. CASCADE
J. fetchJoin
K. JPQL








---
0. tips from 김영한


1. rdb, sql이 1순위고, jpa가 2순위다.
	- java는 대체되도 관계형db는 안없어질거다.
	- 실무 장애의 90%는 관계형db에서 나온다.
2. jpa를 썼을 때, sql query가 어떤식으로 흘러가는지 머릿속에 그려져야한다.
3. legacy는 아무래도 mybatis...
4. JPA는 database connection을 너무 오래시키는게 문제(성능)
	- @Transaction 시작할 때 부터 끝날 때 까지 db Connection 계속 물고있다.
	- 그래서 실시간 트래픽올 땐, 거의 대부분 open session in View를 끈다.
	- admin같이 db Connection 오랫동안 물고있어도 되는 경우, open session in View 켜서 쓴다.
	- 짧은 transaction은 문제 안되는데, 간혹 배치 쿼리 돌릴 때 open session in View 걸면 큰일난다.
5. dependency 없는게 최고, 그 다음이 단방향, 그 다음이 양방향
	- 양방향이 왜 안좋냐?
	- dependency가 양쪽에 걸리니까, 한쪽을 건들 때 저쪽 컴파일 오류 나서, 프로젝트가 크고 복잡하면 리펙토링 힘들다.
	- 일단 jpa modeling시, @ManyToOne 단방향으로 다 깔고, 진짜 필요하면, 반대편 양방향으로 @OneToMany를 추가한다.
		- 복잡한 jpql query짤 때, 종종 일대다로 짜야하는 경우가 생긴다. jpql query 편하게 짜려고 그 때만 양방향으로 짠다.
	- 시스템이 작으면 모든 테이블이 연관관계로 이어진게 좋은데, 복잡해지면, 회원/주문/리뷰 등 연관관계를 끊어내야 한다.
6. ORM은 second level cache를 써야한다?
	- 비추. 중요한 결과값, 최종본만 cache쓰고, 중간단계 짜잘짜잘한건 second cache 안쓰는게..
	- 실무는 복잡하고, 정밀하게 second level cache hit시키는것도 복잡하니까 비추.
7. 수 조 단위의 정산을 하는데, JPA로 다 처리한다.
	- 크리티컬한 결제 같은 시스템도 JPA로 다 처리한다.
	- SpringBoot + JPA + QueryDSL 기본으로 깔고 간다.
	- 쿼리 때문에 문제 발생한 단 한번도 없다. 왜? 컴파일 시점에 대부분 오류 발견하니까.
	- 늦어도 application loading 시점에 발견한다.
8. 테스트는 통합 테스트 때 CRUD 믿고 간다.
	- 이런거 테스트할 시간에 CRUD 믿고, 핵심 비즈니스 테스트 코드 열심히 짜자.
	- 대부분 비즈니스 로직 오류다.
9. 대부분 성능 이슈는 JPA 자체 성능 보다는 JPA를 잘 이해하지 못해서 발생한다.
	- 즉시 로딩: 쿼리가 튄다 -> 지연 로딩으로 변경
	- N+1 문제 -> 대부분 fetchJoin으로 해결됨. (sql base로 짰다면 프로젝트 갈아 엎어야 함)
	- 하나에 쿼리에 집중해서 성능 고민하는 식으로 개발하지 말고, jpa로 빠르게 개발하고, 실제 성능 테스트 돌린 후, 병목 발생하는 구간들을 찾아 고 부분만 변경하는 식으로 개발!
10. 통계 쿼리처럼 매우 복잡한 SQL은 거의 다 QueryDSL로 처리하고, DTO로 뽑아낸다. 정말 안될 경우에 만 네이티브 쿼리 사용한다.
11. 학습 곡선이 높다던데요?
	- 일주일 공부하고 평생(?) 편하자.




---
A. 매핑 어노테이션 정리


-   @Column
    -   @Column(name = "USERNAME")
    -   name
        -   필드와 매핑할 테이블의 컬럼 이름
    -   insertable, updatable
        -   TRUE/FALSE 설정. 읽기 전용
    -   nullable
        -   null 허용여부 결정, DDL 생성시 사용(not null 추가)
    -   unique
        -   유니크 제약 조건, DDL 생성시 사용
    -   columnDefinition, length, precision, scale(DDL)
-   @Temporal
    -   @Temporal(TemporalType.TIMESTAMP)
    -   시간과 관련된 매핑
    -   Date 뿐만아니라 자바8에서 지원하는 LocalDatetime도 지원한다.
-   @Enumerates
    -   @Enumerated(EnumType.STRING)
    -   자바의 Enum 타입 매핑을 지원한다.
    -   현업에서는 EnumType을 무조건 STRING으로 지정 해야한다.
    -   기본 값인 ORDINAL로 설정하면 Enum 순서로 숫자가 매핑되는데, Enum 중간에 필드가 하나 추가 되면 다 꼬이게 된다.
-   @Lob
    -   컨텐츠의 길이가 너무 길 경우 바이너리 파일로 DB에 바로 밀어 넣어야 하는데, 보통 이런 경우에 사용한다.
    -   공통적으로 @Lob으로 사용하면 된다.
    -   CLOB, BLOB 매핑
    -   CLOB : String, char[], java.sql.CLOB
    -   BLOB : byte[], java.sql.BLOB
-   @Transient
    -   이 필드는 매핑하지 않는다.
    -   애플리케이션에서 DB에 저장하지 않는 필드
    -   웬만하면 쓰지 않는 것이...


---
B. 식별자 매핑 어노테이션 정리


a. 식별자 매핑 어노테이션

-   @Id(직접 매핑)
-   @GeneratedValue(strategy = GenerationType.[**타입**])
    -   타입 설정
        -   IDENTITY
            -   IDENTITY 전략은 먼저 엔티티를 DB에 저장하고, 식별자를 조회해서 엔티티의 식별자로 할당하는 전략이다.
            -   기본 키 생성을 현재 연결된 DB에게 위임한다. 계속 값이 채번된다. MYSQL, ORACLE 등 db vendor에 의존적.
            -   IDENTITY 는 id 값을 세팅하지 않고, insert 쿼리를 날리면 database 시스템에서 자동으로 채번을 합니다.
            -   AUTO_INCREMENT 라고도 하며, INSERT 쿼리가 실행된 이후에야 ID 값을 알 수 있습니다.
            -   id 값 생성에 대해서 database 에서 관여하기에 save 메소드를 수행시 persist 로 동작하게 됩니다
        -   SEQUENCE
            -   SEQUENCE 전략은 저장 전에 DB Sequence를 먼저 조회하고, 조회한 식별자를 엔티티에 할당 한 후에 엔티티를 persist해서 영속화하고, 이후 트랜잭션이 커밋되어 flush되면 그때 DB에 저장된다.
            -   server 레이어에서 DB 시퀀스를 이용해서 기본키를 할당한다. 계속 값이 채번된다. 데이터베이스 시퀀스 오브젝트 사용, ORACLE
            -   @SequenceGenerator 필요
            -   동작방식
                -   persist 를 호출하면 (spring data jpa 의 경우 save) sequence 를 가져옵니다.
                -   sequence generator에서 가져온 Sequence 를 id 에 할당하고 (영속성 상태), transaction 이 commit 될 때, insert 쿼리를 날립니다.
        -   TABLE
            -   키 생성용 테이블 사용, 모든 DB에서 사용 가능.
            -   @TableGenerator 필요
            -   단점: Sequence 나 Identity 방식은 하나의 Request 로 처리가 가능하지만 테이블 생성전략은 3개의 스텝이 필요합니다.
            -   lock 을 잡고, seq 를 증가시키고 데이터베이스에 저장합니다. (리소스 소모)
            -   그렇기에 운영에서 잘 안쓴다.
        -   AUTO
            -   방언에 따라 자동 지정, 기본값



b. 권장 식별자 전략

-   기본 키 제약 조건
    -  NOT NULL
    -  UNIQUE, one and only
    -  변하면 안된다.
-   미래까지 이 조건을 만족하는 자연키는 찾기 어렵다. 대리키(대체키)를 사용하자.
    -   예를 들어 주민등록번호도 기본 키로 적절하지 않다.
    -   주민번호를 PK로 설정하고 다른 테이블과 FK 참조시 그대로 주민번호가 넘어간다. 갑자기 나라에서 개인정보 목적으로 "DB에 주민번호 저장하지 마라"라고 한다. 헬게이트 오픈
-   **권장**
    -   **Long + 대체키 + 키 생성전략 사용**
    -   대체키는 전혀 비즈니스랑 관계없는 키.
    -   AUTO_INCREMENT로 숫자로 PK를 사용하면, int쓰면 안된다. 생각보다 금방 끝난다..
    -   Long 타입으로.



---
C. 단방향, 양방향


db에서는 fk로 걸면 두 테이블이 연결되서 방향개념이 없는데,
orm에서는 객체(@Entity)가 다른 객체 참조하면, 방향이 중요함.

Board, Post 두 테이블 중,
Board.getPost() 기능이 필요해서, Board -> Post 참조했으면 단방향 관계,
근데 Post.getBoard() 기능도 필요해서, Post -> Board 까지 참조했으면 양방향 관계.



Q. 왜 굳이 방향 개념이 있는거지?

A. 예를들어, Member -> Book (Member:Book = 1:N) -> Library (Book:Library = N:1) 이런 관계일 때,
Member를 fetch하면, 둘이 연관만 되있으면 Member랑 관련된 Book도 fetch 해 오고, Book에 걸린 Library도 fetch해 오는 식으로 hibernate가 동작하나 봄.

이런 의도하지 않은 불필요한 쿼리가 많이 생기는게 N+1 문제인가 봄.
그래서 EAGER_Loading으로 다 땡겨오는게 아니라, 필요한 부분만 땡겨오는 Lazy_Loading으로 이 문제를 해결하려는 거고.

여튼, 여기서 방향개념이 생긴다면, 둘이 연결되 있지만, 방향이 안맞으면 fetch를 안해오기 때문에, 방향개념을 도입한 듯 하다.



Q. jpa에서 양방향이란, 단방향 2개다(A->B, B<-A)

주인에서는 @JoinColumn(name = "TEAM_ID") 으로,
하인에서는 @OneToMany(mappedBy = "team") mappedBy로 방향을 서로 가르켜야 양방향이 된다.




Q. 근데 Member:Team = N:1  양방향 관계에서, Member가 Team 객체 값을 변경시키거나, Team이 Member의 값을 변경시키려고 하면, 누구 말을 믿어야 함?


그래서 둘 중 하나가 FK를 관리해야 한다.
FK를 관리하는 쪽은 연관관계의 주인으로 만들어서 하인을 등록,수정,삭제 가능하게 하고,
하인은 주인에 대해 조회만 가능하도록 한다.



---
D. 연관관계의 주인


주인이 FK를 관리(등록, 수정, 삭제)한다.
따라서 주인은 FK를 가지고 있는 쪽이다.
단방향/양방향 시, 주인은 @JoinColumn(name = "하인의_ID")을 써서 주인이라고 표시하는데,
양방향 시에만, 하인은 mappedBy 속성을 사용해서 주인을 지정해야 한다.
(주인은 mappedBy 속성을 사용하지 않는다.)


Member:Team = N:1의 관계일 때,
rdb에서 보통은 N쪽이 1의 FK를 가지고 있으므로,
FK를 관리하는 Member가 주인이고, Team이 하인이다.
주인인 Member에서 @JoinColumn(name = "TEAM_ID") 로 하인을 가리키고(TEAM_ID는 하인의 PK를 가르키는 FK)
양방향이면 하인인 Team에서 mappedBy로 주인인 Team쪽에서 엮어준다.


```java
@Entity
@Getter
@Setter
public class Member {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "MEMBER_ID")
    private Long id;

    @Column(name = "USERNAME")
    private String name;

    @ManyToOne
    @JoinColumn(name = "TEAM_ID")
    private Team team;
}

@Entity
@Getter
@Setter
public class Team {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "TEAM_ID")
    private Long id;

    private String name;

    @OneToMany(mappedBy = "team")
    private List<Member> members = new ArrayList<>();
}
```

N쪽이라 주인인 Member에서 Team을 @ManyToOne으로 묶어주고 있고,
1쪽이라 하인인 Team에서 Member를 mappedBy로 주인으로 지정하는데, 여기서 "team"은 주인 클래스에서 하인 필드의 변수이름이다.


Q. 만약 하인쪽에 @OneToMany(mappedBy = "team")가 없었다면?
A. 그러면 Member:Team = N:1 단방향 매핑이었겠지. 양방향이 아니라.
만약 단방향이 었다면,

```java
Team team = new Team();
team.setName("teamA");
em.persist(team);

Member member = new Member();
member.setName("member1");
member.setTeam(team);
em.persist(member);

//case1)
Member findMember = em.find(Member.class, member.getId());
Team findTeam = findMember.getTeam(); //Member -> Team 찾는건 가능한데,


//case2)
team.getMembers().add(member);
em.persist(member); //에러! 이 경우, TEAM_ID가 null이 됨.
```

Member -> Team으로 단방향 @ManyToOne이니까, findMember.getTeam()으로 멤버에서 팀을 가져올 순 있었겠지만,
팀에서 멤버를 가져오진 못했겠지.

왜?
Member:Team = N:1 단방향에서, Member가 N이니까 주인, 즉, FK를 관리함.
Member에서 팀을 더할 순 있어도,
팀에서 멤버를 더하진 못함.
그러면 멤버에서 team attribute가 null로 들어가서 에러남.




Q. Member:Team = N:1 양방향으로 매핑하고 싶다면?
A. 하인쪽인 Team에 만약 하인쪽에 @OneToMany(mappedBy = "team")을 넣으면 양방향이 되지.

```java
Member findMember = em.find(Member.class, member.getId());

Team findTeam = findMember.getTeam();
List<Member> members = findTeam.getMembers();
members.stream().forEach(m-> System.out.println(m.getName()));
```

그러면, 팀에서도 Member를 가져올 수 있지. findTeam.getMembers()로.



Q. 만약 하인에게 주인을 넣으면?
주인이 FK를 관리하고, 주인은 하인의 CRUD가능하지만, 하인은 주인의 READ밖에 못한다며?
만약 하인인 Team에서 주인을 더하면 어떻게 됨?

```java
Member member = new Member();
member.setName("member1");
em.persist(member);

Team team = new Team();
team.setName("teamA");
team.getMembers().add(member);
em.persist(team);
```

Team.member에 FK가 안들어가는 사태 발생.
하인은 주인을 READ만 가능하지, WRITE는 못한다.


```java
Team team = new Team();
team.setName("teamA");
em.persist(team);

member member = new Member();
member.setName("member1");
member.setTeam(team);
em.persist(member);

team.getMembers().add(member);
```

이런 식으로 주인에서 하인을 먼저 더한 후,
하인에서 주인을 더해주는건 가능.
양쪽에 넣어줘야 함






example2) Board : Post = 1 : N


case1) 단방향, (Board : Post = 1 : N)

```java
@Entity
public class Post {
    @Id @GeneratedValue
    @Column(name = "POST_ID")
    private Long id;

    @Column(name = "TITLE")
    private String title;

    @ManyToOne
    @JoinColumn(name = "BOARD_ID")
    private Board board;
    //... getter, setter
}

@Entity
public class Board {
    @Id @GeneratedValue
    private Long id;
    private String title;
    //... getter, setter
}
```

Board:Post = 1:N 관계에서,
주인인 Post에서 @ManyToOne으로 하인인 Board를 참조하여 주인의 FK를 가지고 있음.


case2) 양방향, (Board : Post = 1 : N)
Q. 만약 @ManyToOne 양방향으로 만들고 싶다면?

```java
@Entity
public class Post {
    @Id @GeneratedValue
    @Column(name = "POST_ID")
    private Long id;

    @Column(name = "TITLE")
    private String title;

    @ManyToOne
    @JoinColumn(name = "BOARD_ID")
    private Board board;
    //... getter, setter
}

@Entity
public class Board {
    @Id @GeneratedValue
    private Long id;
    private String title;

    @OneToMany(mappedBy = "board")
    List<Post> posts = new ArrayList<>();
    //... getter, setter
}
```

이번엔 양방향이니까, 하인에서도 @OneToMany를 추가해준다. mappedBy 주인.
(단방향일 땐 mappedBy 안쓰는데, 양방향일 때에만 mappedBy를 쓴다.)


실무 사용 금지!
Q. 왜 앵간하면 단방향으로 만들라는거지? 왜 양방향이면 안된다는거지?



Q. 만약 주인, 하인의 관계를 바꾼다면?

Board : Post = 1 : N 관계라고 할 때,
Board가 하인이고 Post가 주인이라, Post가 Board의 PK를 FK로 들고있는게 정상인데,
만약 Board가 주인이고 Post가 하인으로 설정한다면 어떤 일이 벌어질까?


```java
@Entity
public class Post {
    @Id @GeneratedValue
    @Column(name = "POST_ID")
    private Long id;

    @Column(name = "TITLE")
    private String title;
  //... getter, setter
}

@Entity
public class Board {
    @Id @GeneratedValue
    private Long id;
    private String title;

    @OneToMany
    @JoinColumn(name = "POST_ID") //일대다 단방향을 @JoinColumn필수
    List<Post> posts = new ArrayList<>();
    //... getter, setter
}
```


Q. 이러면 어떤 문제점이 발생할까?

A. 이렇게 짜면, Board : Post = 1 : N에서 주인이 Post, 하인이 Board가 되야 하는데, 주인이 Board, 하인이 Post가 된다.
주인인 Board는 하인인 Post 테이블에 대해 CRUD가 가능한데,
하인인 Post는 주인인 Board에 대해 Read밖에 할 수 없다.

실제로 hibernate에서 돌아가는 쿼리 봐도 이상함.
```java
//...
Post post = new Post();
post.setTitle("가입인사");

entityManager.persist(post); // post 저장. 여기 까진 괜찮음

Board board = new Board();
board.setTitle("자유게시판");
board.getPosts().add(post); //여기서 문제 발생

entityManager.persist(board); // board 저장
//...
```

이 경우, 주인인 post 저장시 까지는 괜찮았다가,
하인인 board 저장할 때, insert board 이후, update post 쿼리까지 나감.

board.getPosts().add(post); 이 부분 때문.

주인인 Board를 저장했는데 하인인 Post Update query가 의도치 않게 날아감 -> 쿼리 성능 저하.

(원래대로 였다면, Post가 주인이고 하인인 Board이니까, 게시판에 글(Post)이 달리면 게시판인 Board도 업데이트 되어야 하니까 그게 맞는데, 이 케이스는 주종관계 뒤집혀서 이상해짐)


결론: 주종관계 정할 때는, 하인쪽에 CRUD하면 주인까지 건드리니까,
1:N관계 같은 곳에서는 1을 주인으로 정하면 1 건드릴 때마다 N을 건드려서 성능저하가 일어난다. 그러니 N을 주인으로 하자.
1:1관계의 경우, 자주 CRUD하는 쪽인 쪽을 주인으로 하자.



---
E. 연관관계 매핑


a. 양방향 @OneToOne
ex. Member : Mypage


```java
@Entity
public class Post {
    @Id @GeneratedValue
    @Column(name = "POST_ID")
    private Long id;

    @OneToOne
    @JoinColumn(name = "ATTACH_ID")
    private Attach attach;
    //... getter,setter
}
@Entity
public class Attach {
    @Id @GeneratedValue
    @Column(name = "ATTACH_ID")
    private Long id;

    @OneToOne(mappedBy = "attach")
    private Post post;
  //... getter, setter
}
```

주인쪽에서는 @JoinColumn(name = "ATTACH_ID") 로 걸고,
하인 쪽에서는 @OneToOne(mappedBy = "attach") 로 양방향으로 건다.


Q. 근데 1:1에서 누가 주인인지 어떻게 정하지?
비지니스 로직은 언제든지 바뀔 수 있는데, db schema는 한번 정해지면 바꾸기 어렵잖아?

A.
생각할 것: FK를 Post 테이블에서 관리해야 하나? 아니면 Attach 테이블에서 관리해야 하나?

만약 하나의 Post에 여러개의 첨부파일을 첨부하는게 비즈니스 로직이라면?
그럼 Attach table이 N이 될 확률이 높으니까 Attach를 주인으로 두고 Post의 PK를 FK로 받아 관리하게 해야하나?

반드시 그런 것 만은 아니다.
만약 반대로 POST가 Attach의 FK를 가지고 있으면(Post가 주인, Attach가 하인),
Post를 조회할 때마다, 이미 Attach의 참조를 가지고 있기 때문에, 성능상 이득이 있다.

그렇기 때문에 1:1 관계에서는, 한쪽이 N이 될 확률이 더 높다고 주인으로 설정하기 보다는,
A쪽을 CRUD시 B쪽의 참조를 가지고 있는게 더 유리하면, A쪽을 주인으로 설정하는게 좋다.


Q. 근데 1대1 단방향은?

참고사항
 * 일대일 관계에서 단방향이 아닌 양방향을 하게되면 Lazy Loading이 작동하지 않는다.
 * 따라서 1 + N문제가 발생할 수 있으므로 조회시 Fetch join을 쓰거나 단방향으로 수정해서 Lazy loading이 되도록 해야한다.



b. @ManyToOne
ex. Member : Library = N:1

가장 보편적인 사용 방법.
최대한 단방향 다대일을 쓰고, 꼭 필요한 경우만 양방향 다대일을 쓴다.


b. @OneToMany
ex. Member : Book

Q. 다대일이랑 일대 다랑 같은거 아냐?
A. 둘 다 @ManyToOne인데, 다대일은 FK관리하는 주인이 다 쪽인데, 일대다는 주인을 1쪽으로 설정한 것
-> 안티 패턴

무슨 차이인지 코드로 알아보자.

예시1) 다대일 정상적인 코드

```java
@Entity
@Getter
@Setter
@Table(name ="MEMBER")
public class Member {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "MEMBER_ID")
    private Long id;

    private String username;

    @ManyToOne
    @JoinColumn(name = "TEAM_ID)
    private Team team;
}
@Entity
@Getter
@Setter
@Table(name ="TEAM")
public class Team {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "TEAM_ID")
    private Long id;

    private String name;

    @OneToMany(mappedBy = "team")
    private List<Member> members = new ArrayList<>();
}
```

Member:Team = N:1 양방향이다.
큰 특이점은 없다.


case2) 일대다 비정상 코드

```java
@Entity
@Getter
@Setter
@Table(name ="MEMBER")
public class Member {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "MEMBER_ID")
    private Long id;

    private String username;
}
@Entity
@Getter
@Setter
@Table(name ="TEAM")
public class Team {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "TEAM_ID")
    private Long id;

    private String name;

    @OneToMany
    @JoinColumn(name = "TEAM_ID")
    private List<Member> members = new ArrayList<>();
}
```

Member:Team = N:1 단방향인데, 보통 주인쪽에서 쓰는 @JoinColumn을 하인에서 썼다.
그래서 Team이 주인이 되었고, Member가 하인이 되었다.

Q. 이러면 무슨 문제가 발생?

```java
Member member = new Member();
member.setUsername("member1");

em.persist(member);

Team team = new Team();
team.setName("teamA");
team.getMembers().add(member); //이 부분이 문제!
```

Team에서 멤버를 더할 때, Member에 update 쿼리가 한번 더 나간다는 문제 발생!
왜?
주인을 CRUD하면 하인까지 update되니까.

차라리 일대다 하지 말고, 다대일에 양방향으로 짜는것이 추천된다.





d. @ManyToMany
양방향 FK가지고 있기는 거의 안쓴다.

실무 사용 금지.

왜?

N+1 problem문제를 보면, orm 특성상 쿼리시 객체에 연관되있으면 관련 테이블도 죄다 fetch해오는 문제가 있어서,
딱 요청한 것만 꺼내오는 Lazy_Loading으로 해결하는데,
@ManyToMany의 경우, join이 양방향으로 엮여있다 보니까, 서로 객체가 가지고 있는 FK 죄다 fetch해오니까,
의도하지 않은 쿼리들이 많이 발생할 수 있기 때문.


따라서 설계 시 최대한 단방향으로 설계를 하고,
꼭 필요한 부분을 양방향으로 조심히 처리하자.


---
F. N+1 problem


연관관계를 갖고있는 객체를 조회하면 JPA는 해당 객체가 들고있는 연관관계의 객체들을 모두 조회해서 끌고오게 된다.
이때 발생하는 문제가 1 + N 쿼리 문제.


example)
Teacher - 단방향 - Subject - 양방향 - Academy = 1:N:1 관계에서,

List<String> subjectNames = academyService.findAllSubjectNames(); 하면,
1. academy 전체 조회하는 쿼리와
2. 각각의 academy가 본인과 연관된 subject들을 조회하는 쿼리가 발생한다.

이렇게, 하위 엔티티인 subject 하나만 가져오고 싶은데(1), subject랑 조인 된 내가 query하지 않은 sub에 붙은 10개의 Academy까지 쿼리함(N)

지금은 Academy가 10개이니 첫조회(1) + 10개의 Academy의 subject 조회(10) = 11 밖에 발생하지 않았지만,
만약 Academy 조회 결과가 10만개면 어떻게 될까요?
한번의 서비스 로직 실행에서 DB 조회가 10만번 일어난다는건 말이 안되지 않을까요?


해결책

1. fetchJoin (가장 추천)
원래대로라면 원하는 애 쿼리 한번에(1), 얘랑 관련된 애들 N개 꺼내오는게 문젠데,
한번에 관련된 애들을 다 끌어오는 방법.


2. FetchType.LAZY
연관 객체를 프록시 객체로 치환하여 껍데기 객체로 대치하여 추후 직접적인 조회가 발생하면 가져오는 방식이다.
꼭 필요할 때 까지 조회를 미루는 것이다.

쿼리 두번하잖아욧! -> FetchType.EAGER 로 하면 쿼리 한방에 다 가져오긴 하지. 근데 의도치 않게 많이 가져온다는게 문제지만.
(참고로 일대일에서는 단방향 관계에서만 LAZY로딩이 가능하다. 양방향이면 LAZY로 해도 EAGER로 작동한다.)


3. etc
그 외에도 있지만 지금은 여기까지만..



---
G. 상속관계


김영한 피셜, 복잡한 프로젝트에서 왠만하면 상속관계 피하라.
경험상, 프로젝트 규모가 작으면 도움 될 순 있으나,
프로젝트 규모가 커지면,
상속관계 모델링 후 정규화 하면,
join 전략 썼을 땐, join을 너무 많이 해야 함.
부모를 query하면, 그 밑에 붙은애들 join을 다 해야해서 성능이슈가 나올 수 밖에 없다.
성능 잡겠다고 단일 테이블 전략 쓰면, 성능엔 이점이 있는데, 구멍이 많다(ex. 컬럼 다 NULL로 만들어야 하고)
또한 단일 테이블 전략은 한 테이블에 데이터가 너무 많이 쌓이니까, 데이터 용량도 너무 많다.

결제 시스템에 상속관계 도입했다가, 몇만건일 땐 괜찮았는데, 백만건 이상 가면, 심플하게 가야한다.




1. join 전략
    장점: 정규화가 제일 잘되있어서 저장공간 효율적 + 깔끔.
    단점1: join 많이 쓰니까 단일 테이블 전략 대비 느림.
    단점2: join 많이 쓰니까 select query가 복잡해짐.
    단점3: 자식 테이블 insert시, 자식에 insert 1번 + 부모에 insert 1번 총 2번 query 일어남.
    결론: 무난한 선택. 비즈니스 적으로 복잡하고 확장 가능성 생각하면 join전략 가져가자.
2. 단일 테이블 전략
    장점: join안쓰니까 SELECT query빠르고 단순함.
    단점1: 자식 엔티티가 매핑한 컬럼은 모두 NULL 허용해야 함.
    단점2: 테이블이 겁나 비대해지는데, 상황에 따라 join보다 더 느려질 수 있다.
    결론: 굉장히 simple하고 확장 가능성 적으면 선택.
3. table per class 전략(부모 attribute 자식 테이블에 합병 후 부모 테이블 안만듬)
    장점: not null 제약조건 사용 가능하다.
    단점: 자식 SELECT query가 UNION ALL 때문에 너무 느리다.
    결론: 비추



G-a. join 전략

자식 1,2,3이 부모의 PK를 FK로 가지고 있음.
부모, 자식1,2,3 총 4테이블이 따로 생성되고,
필요시 join으로 테이블 합쳐서 연산하는 방식.


example)


부모 Item을 자식인 Movie, Book이 상속받고 있다면?
Book

/**
 * hibernate log
 * 1. 부모, 자식이 저장되고, 부모의 pk를 자식이 FK로 받는다.
 * 2. 부모에 있는 DTYPE은 뭐지?
 */
 ```sql
 Hibernate:
    create table Book (
       author varchar(255),
       isbn varchar(255),
       id bigint not null,
       primary key (id)
   )
 Hibernate:
    create table Item (
       DTYPE varchar(31) not null,
       id bigint generated by default as identity,
       name varchar(255),
       price integer not null,
       primary key (id)
   )
 Hibernate:
    create table Movie (
       actor varchar(255),
       director varchar(255),
       id bigint not null,
       primary key (id)
   )


 Hibernate:
    alter table Book
       add constraint FKbwwc3a7ch631uyv1b5o9tvysi
       foreign key (id)
       references Item
 Hibernate:
    alter table Movie
       add constraint FK5sq6d5agrc34ithpdfs0umo9g
       foreign key (id)
       references Item
 ```

부모와 자식 테이블 모두 테이블 생성하는걸 확인 가능.


 Q. 만약 Movie객체를 저장한다면?

 ```java
 Movie movie = new Movie();
 movie.setDirector("감독A");
 movie.setActor("배우B");
 movie.setName("분노의질주");
 movie.setPrice(35000);

 em.persist(movie);

 tx.commit();
 ```

 A. 부모꺼 까지 쿼리가 2번 나간다. (Item 테이블, Movie 테이블 저장.)
    왜? -> 부모를 join했으니까.


Q. DTYPE에 클래스 이름이 디폴트로 저장되는걸 확인 가능한데, DTYPE이 뭐지?

```sql
Hibernate:
   /* insert advancedmapping.Movie
       */ insert
       into
          Item
          (id, name, price, DTYPE)
       values
          (null, ?, ?, 'Movie')
Hibernate:
   /* insert advancedmapping.Movie
       */ insert
       into
          Movie
          (actor, director, id)
       values
          (?, ?, ?)
```

Movie를 넣으면, 부모에 DTYPE에 'Movie'로 입력되네?

Q. DTYPE이 뭐지?
부모 object에서 자식 object join하려고 자식 타입 받는게 DTYPE이라고 한다.



Q. Movie 객체를 조회하면?

```java
Movie movie = new Movie();
movie.setDirector("감독A");
movie.setActor("배우B");
movie.setName("분노의질주");
movie.setPrice(35000);

em.persist(movie);

em.flush();
em.clear();  //DB에 insert쿼리 날리고, 1차 캐시 지우므로 find에서 SELECT 쿼리가 나간다.

em.find(Movie.class, movie.getId());

tx.commit();
```

A. flush(), clear() 해주면, DB에 insert쿼리 날리고, 1차 캐시 지우므로 find에서 SELECT 쿼리가 나간다.
   Item과 inner join을 통해서 결과를 조회한다.


```sql
Hibernate:
  select
      movie0_.id as id2_2_0_,
      movie0_1_.name as name3_2_0_,
      movie0_1_.price as price4_2_0_,
      movie0_.actor as actor1_3_0_,
      movie0_.director as director2_3_0_
  from
      Movie movie0_
  inner join                <-----------------    inner join으로 부모인 item과 조인하는걸 확인 가능!
      Item movie0_1_
          on movie0_.id=movie0_1_.id
  where
      movie0_.id=?
```



G-b. 단일 테이블 전략

자식인 Book, Movie가 부모인 Item을 상속받을 때,
부모 테이블에 자식의 attributes를 몽땅 다 때려박고, 자식을 DTYPE으로 구분하는 전략.

join전략과 다르게, insert query도 한번, select query도 한번이라 성능이 좋다는데,
서비스 규모가 안크고, 조인 쓰기 싫으면 쓰라는데, 이건 아무리 봐도 안티패턴같다..

```sql
Hibernate:
   create table Item (
      DTYPE varchar(31) not null,
      id bigint generated by default as identity,
      name varchar(255),
      price integer not null,
      artist varchar(255),
      author varchar(255),
      isbn varchar(255),
      actor varchar(255),
      director varchar(255),
      primary key (id)
  )
```
실행된 hibernate는 이렇게 생겼다. 자식 attribute가 다 때려박힌 상황. DTYPE으로 자식을 구분한다.


join 전략에 Movie객체 save, select 그대로 돌리면,

```sql
Hibernate:
   select
      movie0_.id as id2_0_0_,
      movie0_.name as name3_0_0_,
      movie0_.price as price4_0_0_,
      movie0_.actor as actor8_0_0_,
      movie0_.director as director9_0_0_
   from
      Item movie0_
   where
      movie0_.id=?
       and movie0_.DTYPE='Movie'
```

부모 join 필요 없고, 한번의 쿼리로 실행 완료.



G-c. TABLE_PER_CLASS

자식 테이블에 부모 테이블 각각 합치는 전략(비추)
각각의 자식 테이블에게 부모의 attribute를 넣고, 부모테이블은 안만드는 전략.


ddl을 보면, 자식 테이블만 생성된다.
```sql
Hibernate:
   create table Book (
      id bigint not null,
       name varchar(255),
       price integer not null,
       author varchar(255),
       isbn varchar(255),
       primary key (id)
  )
Hibernate:
   create table Movie (
      id bigint not null,
       name varchar(255),
       price integer not null,
       actor varchar(255),
       director varchar(255),
       primary key (id)
  )
```


Q. Movie를 insert시 어떤일 일어남?

```sql
Hibernate:
   /* insert advancedmapping.Movie
       */ insert
       into
           Movie
          (name, price, actor, director, id)
       values
          (?, ?, ?, ?, ?)
```

Q. 쿼리 2번 일어나지도 않고 좋아보이는데 뭐가 문제?

A. INSERT는 괜찮은데, Movie를 SELECT시, UNION ALL써서 전체 하위 테이블 다 찾는게 문제.

```java
Movie movie = new Movie();
movie.setDirector("감독A");
movie.setActor("배우B");
movie.setName("분노의질주");
movie.setPrice(35000);

em.persist(movie);

em.flush();
em.clear();

em.find(Item.class, movie.getId());

tx.commit();
```

```sql
Hibernate:
   select
      item0_.id as id1_2_0_,
      item0_.name as name2_2_0_,
      item0_.price as price3_2_0_,
      item0_.artist as artist1_0_0_,
      item0_.author as author1_1_0_,
      item0_.isbn as isbn2_1_0_,
      item0_.actor as actor1_3_0_,
      item0_.director as director2_3_0_,
      item0_.clazz_ as clazz_0_
   from
      ( select
          id,
          name,
          price,
          artist,
           null as author,
           null as isbn,
           null as actor,
           null as director,
           1 as clazz_
       from
          Album
       union
      all select
          id,
          name,
          price,
           null as artist,
          author,
          isbn,
           null as actor,
           null as director,
           2 as clazz_
       from
          Book
       union
      all select
          id,
          name,
          price,
           null as artist,
           null as author,
           null as isbn,
          actor,
          director,
           3 as clazz_
       from
          Movie
  ) item0_
where
  item0_.id=?
```
---
H. 영속성 컨텍스트



a. entity lifecycle


```java
//case1) 객체를 생성한 상태(비영속, transient 상태)
Member member = new Member();
member.setId("memberId");
member.setUsername("회원1");



//case2) 영속(managed 상태)
Member member = new Member();
member.setId("memberId");
member.setUsername("회원1");

EntityManager em = emf.createEntityManager();
em.getTransaction().begin();

//객체를 저장한 상태(영속)
em.persist(member);



//case3) 준영속(detached)
em.detach(member);


//case4) 삭제(removed)
em.remove(member);
```


jpa에는 총 4가지 상태가 있으며,
em.persist로 EntityManager에 객체 저장한게 영속 상태.



b. pros1. 1차 캐시

PersistenceContext에서는 1차 캐시,2차 캐시가 있는데,
1차 캐시는 일반적인 캐시가 아니라, PersistentContext가 생성되고 없어질 떄 까지만 잠깐 존재함.


ex.
```java
Member member = new Member();
member.setId("member1");
member.setUsername("회원1");

//1차 캐시에 저장됌
em.persist(member);

//1차 캐시에서 조회
Member a = em.find(Member.class, "member1");
Member b = em.find(Member.class, "member2");

System.out.println(a == b); // 동일성 비교 true -> 위에서 보았듯이 1차캐시가 있기 때문에

```

em.find()하면, db에서 가져오는게 아니라, 1차 캐시를 먼저 탐색 후, 존재하면 반환.
1차 캐시에 없으면, db조회 후, 가져옴.




c. pros2. LAZY LOADING over EAGER LOADING


```java
@Entity
public class Member {

  @Id @GeneratedValue
  private Long id;

  @Column
  private String name;
  private int age;

  //@Column(name = "TEAM_ID")
  //private Long teamID;

  @ManyToOne
  @JoinColumn(name = "TEAM_ID")
  private Team team;

  ...
}

@Entity
public class Team {

  @Id @GeneratedValue
  private Long id;
  private String name;
  ...
}
```

@ManyToOne(fetch = FetchType.EAGER) 이 기본 값인데, 이래 버리면,
Member:Team = N:1 @ManyToOne 단방향/양방향이던 에서,
Member query하면 Team까지 join해서 들고오니까,
@ManyToOne(fetch = FetchType.LAZY) 로 Member query하면, Member만 가져오고, Team은 proxy 객체(가짜 객체)가 들어옴.
왜냐면 저 private Team team;을 비워둘 순 없으니까.

그리고 실제로 Member.team이 쓰일 때, team을 다시 query날림.

일종의 optimization.

1. 일단 전부 LAZY바르고,
2. 아 얘는 항상 Team이랑 묶어서 쓰겠는데? 싶은것을 EAGER로 바꿔주자.
	왜? EAGER쓰면, 예상치 못한 SQL발생할 수 있으니까. N+1 문제 일으킬 확률 있으므로.





d. pros3. transactional write-behind (버퍼 기능)


```java
EntityManager em = emf.createEntityManager();
EntityTransaction transaction = em.getTransaction();
// 엔티티 매니저는 데이터 변경시 트랜잭션을 시작해야 한다.
transaction.begin();

em.persist(memberA);
em.persist(memberB);
//여기까지 INSERT SQL을 데이터베이스에 보내지 않는다.

//커밋하는 순간 데이터베이스에 INSERT SQL을 보낸다.
transaction.commit(); // [트랜잭션] 커밋
```

1. em.persist(memberA); 하면, memberA를 1차 캐시에 저장함과 동시에 INSERT SQL 문 생성해서 '쓰기 지연 SQL 저장소'에 말아 놓음. (만약 memberA 필요하면, db io 안하고 1차캐쉬에서 가져오겠지)
2. em.persist(memeberB); 할 때에도, sql INSERT query 안날림.
3. transaction.commit(); 시, commit안에 flush()할 떄, transactional write-behind에 있던 INSERT SQL문들을 동시에|하나씩 날림.

write-behind에 있던 sql문 날리는걸 flush()라고 함.
flush()한다고 1차 cache가 지워지는건 아니고, query 보내서 persistence context와 db의 sync 맞추는 것.
commit()은 내부적으로 flush()와 commit() 두가지일 동시에 한다.






e. pros4. 변경 감지(dirty checking)


```java
EntityManager em = emf.createEntityManager();
EntityTransaction transaction = em.getTransaction();
// 엔티티 매니저는 데이터 변경시 트랜잭션을 시작해야 한다.
transaction.begin(); // [트랜잭션] 시작

// 영속 엔티티 조회
Member memberA = em.find(Member.class, "memberA");

// 영속 엔티티 데이터 수정
memberA.setName("hjs");
memberA.setAge(10);

// 수정했으니 em.update(member) 이런 코드가 있어야 하지 않을까?

// 하지만 필요없다. 커밋하면 자동으로 업데이트 쿼리가 나간다.
transaction.commit(); // [트랜잭션] 커밋
```


Q. setter로 수정하면 무슨일이 일어나지? update query 나가나?
1. jpa는 트랜잭션이 commit되는 시점에 1차 캐시 뿐만 아니라, 스냅샷도 생성한다.
2. commit()으로 flush()하면, persistence context에서 관리되는 entity 들을 원본 snapshot과 비교해, 바뀐 부분이 있으면 UPDATE query를 db에 보내고 commit한다.


Q. 왜 이렇게 할까?
attributes 10번 바꾼다고 하면, 10번 동안 개별로 update query 날릴거 아니잖아.
그래서 flush()되는 시점까지 write-behind에 예비 sql query문 꽁쳐놨다가,
setter로 수정 다 끝나서 commit()안에 flush() 되면, 그제서야 원본 스냅샷이랑 바뀐 엔티티랑 비교해서 달라졌으면 update query 날리는 식.






f. flush()


f-1. flush의 존재 이유

영속성 컨텍스트를 비우지 않음
영속성 컨텍스트의 변경내용을 데이터베이스에 동기화하는 것이 flush의 목적
flush가 가능한 이유는 DB에 트랜잭션이라는 작업 단위가 있기 때문. -> 커밋 직전에만 동기화하면 됨



f-2. flush가 되는 경우 3가지
1. em.flush() - 직접 호출
2. 트랜잭션 커밋 - 플러시 자동 호출
3. JPQL 쿼리 실행 - 플러시 자동 호출

JPQL 쿼리 실행시 flush가 자동으로 호출되는 이유


```java
em.persist(memberA);
em.persist(memberB);
em.persist(memberC);


// 중간에 JPQL 실행
query = em.createQuery("select m from Member m", Member.class);
List<Member> members = query.getResultList();
```


이 상황에서는 DB에서 데이터 조회가 하나도 안된다. flush가 안되었기 때문에.
때문에 JPA에서는 JPQL을 실행하면 flush가 자동으로 호출되도록 했다. (MyBatis나 Spring JDBC와 함께 사용할 때는 flush를 직접 해줘야 한다.)


옵션 줘서, jpql query말고 commit할 때만 flush()하게 바꿀 수 있다.

em.setFlushMode(FlushModeType.AUTO) - 디폴트
	- 커밋이나 쿼리를 실행할 때 flush
em.setFlushMode(FlushModeType.COMMIT)
	- 커밋할 때만 flush





g. 준영속 상태(detached state)


entity가 persistence context에서 분리된 상태.
따라서 영속성 컨텍스트가 제공하는 기능을 사용하지 못함.


ex. LAZY_LOADING 기능 못쓴다.
영속성 컨텍스트가 죽어있는데 LAZY_LOADING된 객체 건드리면, LazyInitializationException 터진다.



Q. entity를 detached state로 어떻게 만듬?

A.
1. em.detach(entity)
	- 특정 엔티티만 준영속 상태로 전환
2. em.clear()
	- 영속성 컨텍스트를 완전히 초기화
3. em.close()
	- 영속성 컨텍스트를 종료


---
I. CASCADE


관계가 명확할 떄에만 CASCADE쓰고, 왠만하면 안쓴다.

ex. 글과 댓글

소유자가 하나일 때. 굉장히 명확할 때에만 쓴다.



---
J. fetchJoin


그냥 join은 sql날릴 때, join거는거고,
fetchJoin은 값을 영속성 컨텍스트에 entity로 가져왔는데, Member:Team 처럼 join되있는 관계인 경우, 영속성 컨텍스트 상 join시켜줌.

이게 뭔말이냐면, Member:Team = N:1 양방향일 때,
jpql로 Team.members 가져와서 쓰고싶으면, 영속성 컨텍스트에서 join시켜주는 fetchJoin쓰고,
그냥 Team만 가져와서 member와 상관 없는 처리만 하고싶으면 일반 join쓰면 됨.



김영한 피셜:
결국 한방쿼리로 필요한거 다 가져올 때 쓰임.
실무에서 정말 많이 쓰임.
대부분의 성능 최적화에서 이걸 많이 씀. 90% 이상.


fetchJoin과 EntityGraph는 사실 똑같은 기능.
EntityGraph는 항상 leftJoin으로 들어가는게 단점이라면 단점, 대신 장점은 편하다.


