
---
Index


A. Coupon:Order(주인) = 1:1, 양방향
B. Paging(+ queryDSL on service)
C. Querydsl를 이용해서 Repository 확장하기
D. 비밀번호 요구사항을 DDD하게 처리
E. @Setter 대체 방법
F. properties 설정값 가져오기



---
A. Coupon:Order(주인) = 1:1, 양방향


Coupon과 Order는 1:1관계.
근데 누구를 주인으로 하는게 좋을까?
Coupon? Order?


만약 Order가 주인인 경우라면?

```java
// 주문시 1,000 할인 쿠폰을 적용해본 간단한 코드입니다.
public Order order() {
    final Order order = Order.builder().price(1_0000).build(); // 10,000 상품주문
    Coupon coupon = couponService.findById(1); // 1,000 할인 쿠폰
    order.applyCoupon(coupon);
    return orderRepository.save(order);
}
@Test
public void order_쿠폰할인적용() {
    final Order order = orderService.order();
    assertThat(order.getPrice(), is(9_000D)); // 1,000 할인 적용 확인

    final Order findOrder = orderService.findOrder(order.getId());
    System.out.println("couponId : "+ findOrder.getCoupon().getId()); // couponId : 1 (coupon_id 외래 키를 저장 완료)
}
```

장점


console.log
```jpql
// order가 연관 관계의 주인일 경우 SQL
insert into orders (id, coupon_id, price) values (null, ?, ?)

//coupon이 연관 관계의 주인일 경우 SQL
insert into orders (id, price) values (null, ?)
update coupon set discount_amount=?, order_id=?, use=? where id=?

```

INSERT ORDER 시,
order 테이블에 coupon_id 칼럼을 저장하기 때문에 주문 SQL은 한 번만 실행됩니다.

반면에 coupon이 연관 관계의 주인일 경우에는 coupon에 order의 외래 키가 있으니 order INSERT SQL 한 번, coupon 테이블에 order_id 칼럼 업데이트 쿼리 한번 총 2번의 쿼리가 실행됩니다.




단점
Order(주인):Coupon = 1:1 이라, 괜찮은데,
확장성 측면에서 보면, 나중에 Coupon이 여러개 생겼을 경우, Order:Coupon(주인) = 1:N 으로 주인을 Coupon으로 변경해야 함.

이 때, db column이 바뀌니까, 실제 서비스 중인 상황에서는 골치아픔.



또한, Order(주인):Coupon 1:1, 양방향
이니까,
```java
public void applyCoupon(final Coupon coupon) {
    this.coupon = coupon;
    coupon.use(this);
    price -= coupon.getDiscountAmount();
}
```
Order에서 couple 더할 때, this.coupon = coupon; 얘를 해야 FK에 null값 안들어간다.
Coupon.use()도 보면,

```java
public void use(final Order order) {
    this.order = order;
    this.use = true;
}
```
Coupon도 Order를 주입해준다.
만약 this.order = order;을 주석처리 한다면,

```java
public void use(final Order order) {
//  this.order = order; 해당코드를 주석했을 때 테스트 코드
    this.use = true;
}
@Test
public void use_메서드에_order_set_필요이유() {
    final Order order = orderService.order();
    assertThat(order.getPrice(), is(9_000D)); // 1,000 할인 적용 확인
    final Coupon coupon = order.getCoupon();
    assertThat(coupon.getOrder(), is(notNullValue())); // 해당 검사는 실패한다.
}
```
일반적으로 생각했을 때 order 생성 시 1,000할인 쿠폰을 적용했기 때문에 해당 쿠폰에도 주문 객체가 들어갔을 거로 생각할 수 있습니다.
하지만 위의 주석시킨 코드가 그 기능을 담당했기 때문에 쿠폰 객체의 주문 값은 null인 상태입니다.
즉 순수한 객체까지 고려한 양방향 관계를 고려하는 것이 바람직하고 그것이 안전합니다.



---
B. Paging(+ queryDSL on service)


reference:
1. https://cheese10yun.github.io/spring-jpa-best-12/
2. https://cheese10yun.github.io/spring-jpa-best-13/


```java
@RestController
@RequestMapping("accounts")
public class AccountController {
    @GetMapping
    public Page<AccountDto.Res> getAccounts(final Pageable pageable) {
        return accountService.findAll(pageable).map(AccountDto.Res::new);
    }
}

@Service
@Transactional
@AllArgsConstructor
public class AccountService {
    ...
    @Transactional(readOnly = true)
    public Page<Account> findAll(Pageable pageable) {
        return accountRepository.findAll(pageable);
    }
}
```


스프링 레거시에는 pagination일일이 수동 구현해줬어야 했는데, jpa는 이렇게 쉽게 바뀌었네?



AccountController 보면,

@GetMapping
public Page<AccountDto.Res> getAccounts(
        @RequestParam(name = "type") final AccountSearchType type,
        @RequestParam(name = "value", required = false) final String value,
        final PageRequest pageRequest
) {
    return accountSearchService.search(type, value, pageRequest.of()).map(AccountDto.Res::new);
}

이렇게 되있는데, Page<>는 jpa에서 이미 인터페이스로 정의해놨고, 기존 정의된 PageRequest에다가 PageRequest.java에서 super()식으로 덮어쓰는거네.

AccountSearchService.search()보면 리턴 타입이 Page<Account> 인데, 얘는 인터페이스 차원에서 .map()이란 연동되게 해놨네?
여튼 여기서 db에서 쿼리해온 결과물에 n개씩 m개의 페이지로 쪼개서 반환하는 것인 듯.





AccountSearchService.search(); 에서 보면, sql 쿼리가 자바코드로 쓰여있음(?!)

ex.
query = from(account).where(account.email.value.likeIgnoreCase(value + "%"));

와! 실환가?

기존 mybatis는 쿼리가 동적으로 실행되니까, 서비스 시작하고 런타임에서 쿼리 때문에 사고나는 경우도 있었는데,
queryDSL은 컴파일 타임에서 query 에러가 다 잡힌다고 함.

간단한 query는 다 가능하고,
비지니스 관련 복잡한 쿼리도, 방법이 있다고 들음.


그리고 신기한게 QAccount인데,
Account VO에 @Entity를 먹이면, QAccount를 queryDSL이 자체적으로 만들어서, 얘를 가지고 query함.




---
C. Querydsl를 이용해서 Repository 확장하기


```java
public interface AccountRepository extends JpaRepository<Account, Long>, AccountSupportRepository {
    Account findByEmail(Email email);
    boolean existsByEmail(Email email);
}
```
이런 식으로 상속 받아서(자바에서 상속이 2개가 안될텐데 이상하게 여긴 되네? 인터페이스라 그런가?


```java
public interface AccountSupportRepository {
    List<Account> findRecentlyRegistered(int limit);
}
```
기존 Repository엔 이런식으로 확장하고,

```java
@Transactional(readOnly = true)
public class AccountSupportRepositoryImpl extends QuerydslRepositorySupport implements AccountSupportRepository {

    public AccountSupportRepositoryImpl() {
        super(Account.class);
    }

    @Override
    public List<Account> findRecentlyRegistered(int limit) {
        final QAccount account = QAccount.account;
        return from(account)
                .limit(limit)
                .orderBy(account.createdAt.desc())
                .fetch();
    }
}
```

이런식으로 impl 클래스엔 extends QuerydslRepositorySupport 해서 확장하네?

여기에선 주로 queryDSL이 기존에 만들어놓은 인터페이스 오버라이드 목적으로 쓰고,
실제 query 조합은 service단에서 하는 듯.

AccountRepositoryTest.java
```java
@Test
public void findRecentlyRegistered_test() {
    final List<Account> accounts = accountRepository.findRecentlyRegistered(10);
    assertThat(accounts.size()).isLessThan(11);
}
```

테스트 클래스에서 커스텀으로 만든 findRecentlyRegistered(); 가 쓰이네.



근데 비즈니스단 sql이 너무 복잡하면, 아래처럼 native sql도 간~~~혹 쓴다고 한다.

@Query("select *from....")
List<Account> findXXX();

이런식으로 직접 작성해서 쓰는듯?



---
D. 비밀번호 요구사항을 DDD하게 처리


 * ---
 * 비밀번호 요구사항
 *
 *
 * 1. 비밀번호 만료 기본 14일 기간이 있다.
 * 2. 비밀번호 만료 기간이 지나는 것을 알 수 있어야 한다.
 * 3. 비밀번호 5회 이상 실패했을 경우 더 이상 시도를 못하게 해야 한다.
 * 4. 비밀번호가 일치하는 경우 실패 카운트를 초기화 해야한다
 * 5. 비밀번호 변경시 만료일이 현재시간 기준 14로 연장되어야한다.


비밀번호 처리 관련 메서드 들을 Account나 service layer에 분산하지 말고, Password객체 안에서 모두 처리하면,
책임 소재 명확해지고, test 코드도 짜기 쉬워진다.
Account.domain.Password.java 참조



---
E. @Setter 대체 방법


@Setter 하면, 해당 객체의 모든 attribute에 대해, 수정 권한을 부여하는데,
의도치 않은 attribute에 @Setter 권한 부여하는걸 사전에 미리 방지하고 싶다면?(Secure coding)

```java
public Account updateMyAccount(long id, AccountDto.MyAccountReq dto) {
    final Account account = findById(id);
    account.setEmail("value");
    return account;
}
```

이런 방식보다,

```java
public Account updateMyAccount(long id, AccountDto.MyAccountReq dto) {
    final Account account = findById(id);
    account.updateMyAccount(dto);
    return account;
}
// Account 도메인 클래스
public void updateMyAccount(AccountDto.MyAccountReq dto) {
    this.address = dto.getAddress();
    this.fistName = dto.getFistName();
    this.lastName = dto.getLastName();
}
```

이런 식으로, 미리 바꿀 수 있는 attribute 지정 가능.
더 직관적이기도 하다. .setter()보다 .update()가.




---
F. properties 설정값 가져오기


case1) 안티 패턴

```.yml
user:
  email: "yun@test.com"
  nickname: "yun"
  age: 28
  auth: false
  amount: 101
```


```java
public class AntiSamplePropertiesRunner implements ApplicationRunner {
    private final Environment env;

    @Override
    public void run(ApplicationArguments args)  {
        final String email = env.getProperty("user.email");
        final String nickname = env.getProperty("user.nickname");
        final int age = Integer.valueOf(env.getProperty("user.age"));
        final boolean auth = Boolean.valueOf(env.getProperty("user.auth"));
        final int amount = Integer.valueOf(env.getProperty("user.amount"));

        log.info("=========ANTI=========");
        log.info(email); // "yun@test.com"
        log.info(nickname); // yun
        log.info(String.valueOf(age)); // 27
        log.info(String.valueOf(auth)); // true
        log.info(String.valueOf(amount)); // 100
        log.info("=========ANTI=========");
    }
}
```

env.getProperty("user.email");은 너무 번잡함.
그리고 자료형 확인도 어렵고.



case2) recommended pattern

```java
@Configuration
@ConfigurationProperties(prefix = "user")
@Validated
public class SampleProperties {
    @Email
    private String email;
    @NotEmpty
    private String nickname;
    private int age;
    private boolean auth;
    private double amount;

    // getter, setter
}

public class SamplePropertiesRunner implements ApplicationRunner {
    private final SampleProperties properties;
    @Override
    public void run(ApplicationArguments args)  {
        final String email = properties.getEmail();
        final String nickname = properties.getNickname();
        final int age = properties.getAge();
        final boolean auth = properties.isAuth();
        final double amount = properties.getAmount();

        log.info("==================");
        log.info(email); // yun@test.com
        log.info(nickname); // yun
        log.info(String.valueOf(age)); // 27
        log.info(String.valueOf(auth)); // true
        log.info(String.valueOf(amount)); // 100.0
        log.info("==================");
    }
}
```

POJO객체 두고, 해당 attribute를 자료형 정해진 상태에서 getter로 가져오는 방법.
@Valid로 검사도 가능.


