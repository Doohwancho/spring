
---
Index

A. annotations
B-1. @Valid -> error 처리
B-2. @Embeddable로 Address, Email, Password 객체화
C-1. OneToMany
D-1. application.yml에서 property, env 값 가져오기
E. OneToOne
F. @Join 거는 주체
x. Paging
x. queryDSL




---
A. annotations

a. VO on class
@Entity
@Table(name = "account")


b. VO on fields
@Id
@GeneratedValue - auto-increment
@Email
@Column(name = "email", nullable = false, unique = true) - db 제약사항 설정
@NotEmpty
@Temporal(TemporalType.TIMESTAMP)
@CreationTimestamp - 생성시 jvm 시간 기준으로 Timestamp 생성
@UpdateTimestamp - update시 jvm 시간 기준으로 Timestamp 생성




---
B-1. @Valid -> error 처리


vo에 @NotEmpty같은 조건 달고,
controller 파라미터에 @Valid 달아서, 조건에 부합하는지 체크,
틀리면, error 처리를 하는데,
@ControllerAdvice 를 써서 ErrorExceptionController로 컨트롤러에 프록시 담.
특정 exception이 발생하면, 캐치해서 에러 처리해주는 함수 작성. (ex. @ExceptionHandler(EmailDuplicationException.class)가 캐치)


Q. 근데 왜 별개로 에러 처리해줘야해? 기본 기능 쓰면 안돼?
A.
기본 에러 response엔 시스템 정보같은 보여주기 껄끄러운 정보들도 잡다하게 들어가있고, 포멧도 제각각임.
결국 error response 처리를 프론트엔드에서 해줘야 하는데, 포멧 통일시켜주려면, 커스텀으로 만드는게 좋다.
error response template은 ErrorResponse.java임.


example)

swagger2로 post register에 다음과 같이 필드 하나 빼고 보내면, (firstname이 비어있음)

{
  "address1": "address1",
  "address2": "address2",
  "email": "mail@gmail.com",
  "firstName": "",
  "lastName": "cho",
  "password": "1234",
  "zip": "zip code"
}


controller에 @Valid에서 제한사항 체크 중, @NotNull에 걸려서,

{
  "message": "입력값이 올바르지 않습니다.",
  "code": "???",
  "status": 400,
  "errors": [
    {
      "field": "firstName",
      "value": "",
      "reason": "반드시 값이 존재하고 길이 혹은 크기가 0보다 커야 합니다."
    }
  ]
}

이런 response가 날아옴.
message에 "입력값이 올바르지 않습니다." 는 ErrorCode.java에서 옴



---
B-2. @Embeddable로 Address, Email, Password 객체화



원래 dto가 이렇게 생겼잖아?

{
  "address1": "address1",
  "address2": "address2",
  "email": "mail@gmail.com",
  "firstName": "doohwan",
  "lastName": "cho",
  "password": "1234",
  "zip": "zip code"
}


근데 여기서 address, password, email을 한단계 더 객체화 시켜서, 관리하는 것.
그럼 구조가 이렇게 됨.

{
  "address": {
    "address1": "address1",
    "address2": "address2",
    "zip": "zip code"
  },
  "email": {
    "address": "string"
  },
  "firstName": "string",
  "lastName": "string",
  "password": {
    "expiration": true,
    "expirationDate": "2022-10-17T09:30:06.848Z",
    "failedCount": 0,
    "ttl": 0,
    "value": "1234"
  }
}

근데 왜 굳이 이렇게 객체화 또 시킴?

Address같은 경우에, address1, address2, zip 통합관리 해줘야 하잖아.
Password도 보면, BCryptPasswordEncoder로 encrypt하고 복호화 하고 처리하는 로직 다른 클래스에서 관리 안하고, 여기에서 비밀번호 값과 관리 메서드 일괄관리하는 것.


여튼 swagger2로 register하면, 이렇게 response 옴

{
  "email": {
    "address": "mail@gmail.com"
  },
  "password": {
    "value": "$2a$10$91xowRb891uwr7h90qwZCOU7B54.RnihsPukMKWRxF1wblVV2KGG.",
    "expirationDate": {
      "dayOfYear": 304,
      "dayOfWeek": "MONDAY",
      "month": "OCTOBER",
      "dayOfMonth": 31,
      "hour": 18,
      "minute": 31,
      "second": 2,
      "nano": 263000000,
      "year": 2022,
      "monthValue": 10,
      "chronology": {
        "id": "ISO",
        "calendarType": "iso8601"
      }
    },
    "failedCount": 0,
    "ttl": 1209604,
    "expiration": false
  },
  "firstName": "doohwan",
  "lastName": "cho",
  "address": {
    "address1": "address1",
    "address2": "address2",
    "zip": "zip code"
  }
}


AccountDto.Res에서 password만 숨기면 딱이겠다.


---
C-1. OneToMany


배송과 배송로그의 관계는 1:M 관계. 고로 json에서 이렇게 표기됨.

{
  "address": {
    "address1": "서울 특별시...",
    "address2": "신림 ....",
    "zip": "020...."
  },
  "logs": [
    {
      "status": "PENDING" //#1
    },
    {
      "status": "DELIVERING" //#2
    },
    {
      "status": "COMPLETED" //#3
    }
  ]
}


DeliveryLog는 Delivery에서 private List<DeliveryLog> logs = new ArrayList<>(); 이런식으로 관리됨.


Delivery를 까보면,
@OneToMany(mappedBy = "delivery", cascade = CascadeType.PERSIST, orphanRemoval = true, fetch = FetchType.EAGER)
private List<DeliveryLog> logs = new ArrayList<>();


@OneToMany 붙어잇고,
orphanRemoval = true 인걸 보니, 부모인 Delivery가 지워지면, 거기에 1:M으로 묶여있던 자식들 죄다 삭제하라는 말인 듯?
delete on cascade 였나.


cascade = CascadeType.PERSIST는 뭐지?
자식들 .add()하는거 트랜젝션 관련 코드인 듯?

// cascade 없는 경우
Hibernate: insert into delivery (id, address1, address2, zip, created_at, update_at) values (null, ?, ?, ?, ?, ?)

// cascade PERSIST 설정 했을 경우
Hibernate: insert into delivery (id, address1, address2, zip, created_at, update_at) values (null, ?, ?, ?, ?, ?)
Hibernate: insert into delivery_log (id, created_at, update_at, delivery_id, status) values (null, ?, ?, ?, ?)

맞네.




fetch = FetchType.EAGER는 근데 뭐지?
lazy loading, eager loading 있는데,
lazy loading은 부모 자식 1:M 관계에서, 자식들을 프록시로 lazy load하고, 실제 쓸 때, 조회함.
eager loading은 원래대로 다 쿼리해오고.



다음으로 DeliveryLog를 까보면,

@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
@ManyToOne   <--------- 이게 붙어있네?
@JoinColumn(name = "delivery_id", nullable = false, updatable = false)
private Delivery delivery;

자식 입장에서 부모는 M:1이니까 @ManyToOne인 듯.
@JoinColumn은 자식이 부모의 delivery_id인 FK 가지고 있는걸 저렇게 표현한 듯?


DeliveryLog의 메서드 보면, cancel()같은 애들은 자기가 자기 케어함.
jpa에서 객체는 자기 스스로 관리하는 방식으로 짜는 듯



---
D-1. application.yml에서 property, env 값 가져오기


not to do) AntiSamplePropertiesRunner.java

왜 안티패턴임?
자료형 바인딩 문제 때문.


SampleProperties에선 커스텀으로 정의한 @Email도 쓸 수 있잖어.
data-jackson-binding의 도움을 받을 수 있음.




---
D-2. local, dev, production 환경 나눠서 관리하기.

공통사항만 application.yml에 남기고,
나머지 다른점은(다른 디비 쓴다거나, 다른 유저 아이디, 비밀번호 쓴다거나...)를 application-{env}.yml에 나눠서 관리

프로젝트 실행 시, intellij라면, Edit Configuration의 VM Option에서
-DSpring.profiles.active=local    설정해주고,
Active Profiles 는 local로 설정해주어야 한다.



---
E. OneToOne 관계

Delivery와 DeliveryLog는 1:M 관계.
Coupon과 Order는 1:1관계.



---
F. @Join 거는 주체 in 1:1관계 || 1:M 관계


Coupon과 Order는 1:1관계.
근데 Join을 어느 엔티티에서 걸지? Coupon? Order?
부모가 자식한테 거는건가?

Order이 발생하면, 그 후에 Coupon이 발행되잖아.
Order이 부모네?

그리고 쿠폰 검색할 때도, select * from order join coupon 이런식으로 하겠지?
맞나?

OrderService.java에서 보면, order에 쿠폰 적용을 아래와 같이 하네?

public Order order() {
    final Order order = Order.builder().price(1_0000).build(); // 10,000 상품주문
    Coupon coupon = couponService.findById(1); // 1,000 할인 쿠폰
    order.applyCoupon(coupon);
    return orderRepository.save(order);
}

쿠폰을 각 order마다 개별 uuid줘서 보관하는게 아니라, 쿠폰의 종류만 보관하고, join하는 식이구나.


음 쿠폰 자체를 찾는 쿼리가 있는게 아니라, Order을 찾고, 해당 Order이 가지고 있는 쿠폰을 찾는 식으로 쿼리가 만들어지겠네?

SELECT order.name, coupon.amount
FROM order
WHERE order.coupon_id = coupon.id

뭐 이런식으로.

order 입장에서 coupon에 join거니까, join문은 order에 있어야 하는건가?

1:M 관계에선 부모인 1의 pk를 fk로 M이 갖고있는게 관례잖아? M쪽에서 @JoinColumn 해줬는데,(ex. Delivery 부모 1 : DeliveryLog 자식 M, @Join)
1:1 관계에선 이 둘 중, 어느놈이 부모인지 판단한 다음, 부모쪽에서 @join 해줘야 하나보다. (ex. Order 부모 1, @Join : Coupon 자식 1)


근데 1:M관계에선, 주로 M쪽에서 쿼리걸고, 부모를 Join해줬나?
DeliveryLog에서 @Join으로 Delivery 거는데,
아 어떤 Delivery '가'에 해당하는 DeliveryLog를 query할 때,
SELECT *
FROM DeliveryLog
JOIN Delivery

하잖아.

SELECT DeliveryLog.id, DelieveryLog.name
FROM Delivery
JOIN DeliveryLog

이게 아니라.

join거는 주체가 DeliveryLog -> Delivery 로 거네.
그러니까 DeliveryLog가 @Join가지고 있는게 맞네.

결국 @Join거는 주체 파악하려면, query를 생각해보면 되네.


