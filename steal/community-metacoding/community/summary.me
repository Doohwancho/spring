---
index


project setup
A. refresh token
B. Exception
C. Message
D. bbs crud+image
E. bbs likes + favorites
F. bbs replies
G. report
H. back office(admin page)



---
project setup

database)
1. Mysql 데이터베이스 이름 'communityDB' 생성
2. 접속 아이디는 root, 비밀번호는 비우기
3. create databases communitydb;
4. use communitydb;



---
A. refresh token


---
Q. 왜 jwt access token만 쓰지, 거기에 refresh token까지 더해서 썼지?


jwt access token에 만료시간이 있잖아?
그게 길면 길수록 안좋겠지? 1년 잡으면, 한번 탈취하면 해커가 1년 내내 내 계정 자유이용권이니까.
그러면 최대한 jwt access token의 유효기간을 짧게해서, 재발급해야, 해커가 만약 jwt access token을 탈취하더라도,
5분마다 재발급받으면, 5분밖에 내 계정 못쓰니까, 어느정도 보안이 좋아졌다 할 수 있겠지?

근데 문제는, jwt access token을 받는 시기인데,
시스템은 사용자에게 권한을 부여하기 위해(authorization), 인증(authentication, ex. login)을 거쳐야 함.
jwt access token은 인증(로그인) 후에 발급받는 토큰임.
보안 높히자고 5분마다 로그인하게 만들면 UX 겁나 떨어지겠지?

그러니까 jwt token을 짧게 유지하고(max 1hr), jwt token을 재갱신 시켜주는 refresh token을 1주일 이렇게 잡으면,
유저는 5분마다 수동으로 로그인 안해도, 서버에서 jwt access token이 만료되면, refresh 보고 validate()하면 jwt token을 재발급해줌.


jwt토큰은 권한이 높음. 이걸로 여러 리소스 접근함.
refresh token은 권한따윈 없음. 그저 jwt token 검증하고 re-issue하는데만 쓰이니까.




---
Q. 만약에 refresh token이 탈취당하면 어떻게 해?

user1는 jwt token + refresh token이 있어.
hacker는 user1의 refresh token이 있어.(탈취했으니까)

user1의 jwt token 만료시간이 아직 안끝났는데, hacker가 서버에 refresh token 보내면서 jwt token 재갱신 요청을 한다?
그럼 서버는 탈취된걸로 간주하고 refresh token을 만료시킴.



jwt token은 인증할 때, TokenProvider.java에 AUTHORITIES_KEY랑 비교해서 검증하잖아? (서버에서 private key 관리)
refreshToken은 db에 저장함.
key:유저 아이디, value: refresh token key로



---
Q. 만약에 jwt access token이 탈취당하면 어떻게 해?


해커가 jwt access token들고 모든 리소스에 접근 가능하긴 한데,
제한시간이 있어서 그나마 1년 자유이용권은 막는 느낌?

refresh_token은 이걸 가지고 토큰 탈취 막겠다라기 보다는,
해당 계정의 후속조취용.



---
Q. 만약에 jwt access token + refresh token 둘 다 탈취당하면 어떻게 해?

GG

---
Q. 어떻게 token 발급 customization 구현했지?

1. SecurityConfig.java에서 jwt config 등록 (.apply(new JwtSecurityConfig(tokenProvider));)
2. JwtSecurityConfig 에서 JwtFilter에 TokenProvider를 먹여서 custom Filter를 등록.
    2-1. JwtFilter는 doFilterInternal()로 JWT 토큰의 인증 정보를 현재 쓰레드의 SecurityContext 에 저장하는 역할 수행
    2-2. TokenProvider에서 jwt private key 암호화 하고, expire time도 정하고 등등함.(jwt access token 유효기간은 1일, refresh token 유효기간은 7일)
    2-3. TokenProvider을 커스텀해서 RefreshToken생성 후, responseDTO에 jwt token + refresh token 담아서 반환
3. 유저가 서버로 로그인 요청하면, AuthController에 POST /api/sign-in에 요청와서 authService.signIn(req) 실행.
4. AuthService.sign-in()에서 유저 검증 후, Authentication을 기반으로 jwt token+refresh token이 담긴 TokenDto생성. refresh token은 db에 저장 후, TokenDto 반환. (로그인 할 때마다 jwt token + refresh token 새롭게 만들어서 주네?)
5. 이제부터 client->server로 HttpRequest보낼 때, jwt token + refresh token 담아서 보냄
6. JwtFilter에서 HttpRequest안에 jwt token을 꺼내 tokenProvider.validateToken(jwt) 로 검증하고, tokenProvider.getAuthentication(jwt) 로 Authentication 받아온 후, SecurityContextHolder.getContext().setAuthentication(authentication); 로 스프링 시큐리티 컨텍스트에 해당 Authentication을 등록함


Q. jwt token expire시간이 1시간인데, 로그인 한 후 1시간이 지나버렸어. 아직 refresh token은 남아있는 상태야. 어쩌지?
JwtFilter에서 tokenProvider.validateToken(jwt)에서 "auth"라는 secret key는 검증 해서 패스했긴 했는데,
JwtFilter에서는 secret key만 맞으면 expire date 검증 안하고 바로 SecurityContextHolder.getContext().setAuthentication(authentication); 에 등록해버리네?

아니면, jwt토큰 만들 때 설정한 expire date시간이 지나면, 자동으로 없어지게 처리해놨나? 내부적으로?

TokenProvider.validateToken()에서 Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token); 하면 expire date 끝난거 검증해주나?


Q. RefreshToken에 expiration date가 없는데?
https://github.dev/dyparkkk/jwt-spring-security-demo 에 JwtTokenProvider.java에서 createRefreshToken()을 보면, expiration date 쓰는데?

뭐야 TokenProvider.generateTokenDto(authentication) 을 보면 expiration date 있네?


Q. 로그인 한 후, 일주일이 지나서 jwt token + refresh token 둘 다 expire 되버렸어. 어쩌지?



로그인 한 후에 jwt token+refresh token이 발급되니까, AuthService에 SignIn()을 보면 되고,
refresh token을 보고 jwt access token 재발급받는건 AuthService에 reissue()를 보면 됨.
주석 달려있음.


Q. jwt token만료시 refresh token으로 서버에서 자동으로 재갱신해주는 코드가 없다????

jwt token이랑 refresh token이 검증하는 부분이랑 재갱신 하는 부분이 궁금해졌습니다.
로그인할 때 server->client에게 1. jwt token 2. refresh token을 주고, 이후엔 client->server 요청시 토큰 2개를 첨부해서 보내잖아요?
이후에 client->server 요청시,
JwtFilter에서 먼저 TokenProvider.validateToken()로 토큰이 유효한지 검증한 이후, 검증이 되면 SecurityContext에다 유저의 Authentication을 등록하는 식으로 동작하는걸 확인했습니다.

그런데 jwt 토큰의 만료기간이 끝나서 throw ExpiredJwtException() 한다면,
유저는 refresh token으로 jwt token을 재갱신 해야 하지 않습니까?

그래서 구현한게 AuthController에 POST /api/reissue 에서 이어지는 AuthService에 reissue()이구요.

그러면 만약에 어떤 유저가 있는데,
jwt token 만료기간이 끝났고, refresh token 만료기간이 남아있다고 가정합시다.
유저가 게시글을 클릭했어요.

client->server로 요청했는데 jwt token이 없어서 throw ExpiredJwtException() 되었으면,
client 단에서 이 응답 받으면, 다시 POST /api/reissue 를 요청하는 코드를 view단에 심어야 하는거에요?

제 생각엔 jwt token이 만료됬을 때, refresh token을 보고 재갱신하는 로직이 백엔드 서버에 구현되있어야 하는데,
그 코드가 어느부분인지 모르겠습니다.

[출처] 스프링부트 커뮤니티 API 서버 만들기 #1 - 로그인 기능 + Validation + Exception 구현|작성자 이재윤




---
Q. 회원가입, 로그인 postman으로 실습해보기.

1. 회원가입
POST http://localhost:8080/api/sign-up

{
    "username": "pk8294",
    "password": "1234",
    "nickname": "cho",
    "name":"doohwan"
}

이 시점에 데이터 베이스 확인하면,

use communitydb;
select * from user;
유저 정보가 들어가있다.
하지만, 아직 로그인해서 토큰 받진 않았기 때문에,
select * from refresh_token; 하면  정보가 없다.


2. 로그인

authentication(인증, 로그인) 후에 jwt token + refresh token이 발급된다.


POST http://localhost:8080/api/sign-in

{
    "username": "pk8294",
    "password": "1234"
}


하면, jwt access token과 refershtoken을 준다.
{
    "success":true,
    "code":0,
    "result": {
        "data": {
            "accessToken":"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwazgyOTQiLCJhdXRoIjoiUk9MRV9VU0VSIiwiZXhwIjoxNjY2Nzg0MjkxfQ.Qvv9ruZz2GDOe6Nszh7uWjCXdqgsoaLXhFGOWRgP3Of-NBwlvMmGHE1Nf2QFdNbA0zwrVKL1KtQYZkvBb3AfXg",
            "refreshToken":"eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjE2NjczMDI2OTF9.WO2rwS08enuNlbVJSHSJk_pfP9-kCj2LUgf1Eb-t7rkbZfBgtQnXTePMbpARXVAuyDLRlTyabXHyGpk1i1PxSQ"
        }
    }
}

그리고 select * from refresh_token; 하면, refresh token이 들어가있다.
rt_key에 유저 아이디,
rt_value에 refresh token이 들어가있다.





---
B. Exception


advice.ExceptionAdvice에서 @RestControllerAdvice 선언해놓고,
해당 컨트롤러 처리 중간에, 특정 Exception이 발생하는걸,
@ExceptionHandler(TokenExpiredException.class) 이걸로 낚아채서,
@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) HttpResponse는 이렇게 설정하고,
return Response.failure(400, "토큰이 만료되었습니다." HttpResponse를 리턴한다.

이 때, @ExceptionHandler에서 낚아챈 Exception class들의 관리는,

exception/에서 관리하고 있으며,
생성자 파라미터로 Exception 메시지를 받는다.

메타코딩 이분은 ExceptionAdvice에서 에러 메시지 넘겨줬는데, 이것보단 해당 Exception 클래스 안에 메시지 적는게 더 좋지 않을까?
나라면 저렇게 할지 싶은데.


---
C. Message

기능
저번에도 포스팅 했지만, 여기서 중요한 점은
보낸 쪽지를 삭제한다면, 유저에게 보낸 쪽지는 안 보이지만,
받은 사람에게는 보입니다. (받은 사람도 지우면 DB에서 삭제)

반대로 받은 사람이 받은 쪽지를 삭제하면
보낸 사람의 보낸 쪽지함에는 아직 삭제하지 않아서 보이고
보낸 사람도 보낸 쪽지를 삭제하면 두명 전부에게 사라지고,
DB에서 쪽지가 삭제 됩니다.



---
D. bbs+image


추가된 클래스
BoardController.java
Board
Image
BoardService
BoardRepository
FileService
LocalFileService



---
E. 게시글 좋아요+즐겨찾기

기능
1. 사용자가 좋아요를 누르면 게시글의 좋아요 수가 +1이 되고,
2. 다시 버튼을 누르면 좋아요가 -1 이 됩니다.
3. 그리고 좋아요 수가 일정 수 이상 도달하면, 인기 게시물로 선정이 됩니다.
4. 즐겨찾기도 마찬가지로 POST 요청으로 +- 1이 증가 되고,
5. 유저 페이지에서 즐겨찾기 한 글을 클릭하면, 유저가 즐겨찾기 한 글의 목록만 리턴됩니다.


구현 클래스
LikeBoard
Favorite
BoardController
BoardService
LikeBoardRepository



---
F. replies


구현 클래스
Comment
CommentController
    CommentReadCondition
    CommentCreateRequest
    CommentDto
CommentService
CommentRepository



---
G. report

ReportService의 신고 로직

1. 먼저 신고 대상자를 찾을 수 없거나, 자기 자신을 신고하는 경우 Exception 으로 예외 처리를 해주었고,
2. 접속 유저가 대상을 신고한 적이 없다면 (테이블이 존재하지 않는다면) 테이블을 생성하고 신고처리를 해줍니다.
3. 신고처리를 하고, size를 불러와서 10 이상일시 (== 신고 누적수 10이상)
4. User 객체의 reported 필드를 true 로 바꿔줍니다. (이렇게 true로 바꾸는 이유는 추후에 신고 처분을 해주기 위해서입니다.)
5. 게시판 신고도 유저 신고 로직과 동일합니다.



구현 클래스


ReportController
    UserReport
    UserReportRequest
    BoardReportResponse
    UserReportRequest
    UserReportResponse
ReportService
BoardReportRepository
UserReportRepository



---
H. back office (admin page)



구현 클래스

Admin
AdminController
AdminService