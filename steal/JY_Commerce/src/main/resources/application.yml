server:
  port: 80

spring:
  profiles:
    active: deploy

---
spring:
  profiles: devel

  #### jpa
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate.dialect: org.hibernate.dialect.H2Dialect
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100
    show-sql: true

  #### datasource
  datasource:
    url: jdbc:h2:tcp://localhost/~/develop/h2/commerce
    #    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:

  #### h2
  h2:
    console:
      enabled: true
      path: /h2-console

  #### cache (redis)
  cache:
    cache-names: red
    redis:
      host: localhost
      port: 6379
      time-to-live: 3600000
    type: redis

---
spring:
  profiles: deploy

  sql:
    init:
      mode: always # 서버 시작시 항상 classpath의 sql문을 실행하도록 설정
      continue-on-error: true # 서버 시작시 sql문을 실행할 때 오류 무시하고 계속 진행
      data-locations: classpath:sql/initCategory.sql # 서버 시작시 dml sql문을 실행할 위치 및 파일 지정

#      schema-locations: classpath:sql/schema-postgresql.sql # 서버 시작시 ddl sql문을 실행할 위치 및 파일 지정

  #### jpa
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100
    show-sql: true

  #### datasource
  datasource:
    url: jdbc:mysql://localhost:3306/commerce?serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password:
    hikari:
      maximum-pool-size: 100

  #### h2
  h2:
    console:
      enabled: true
      path: /h2-console

  #### cache (redis)
  cache:
    cache-names: red
    redis:
      host: localhost
      port: 6379
      time-to-live: 3600000
    type: redis
