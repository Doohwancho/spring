
---
Q. how to setup?


on mysql db,
1. CREATE DATABASE security DEFAULT CHARSET UTF8;
2. application.properties에서 DB username과 password를 개인에 맞게 변경
3. start spring app server
4. http://localhost:8080/user/init    -> create admin user
5. mysql에서 use security -> select * from user; 로 admin 계정 생긴지 확인 

on singup,
1. start postman
2. start spring app 
3. http://localhost:8080/user/signUp 에 body:raw에 {"email":"pk8294@naver.com", "pw":"1234"} 담아서 보내면, 토큰이 온다. 
eyJyZWdEYXRlIjoxNjY0OTcxNTU1MTg5LCJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJyb2xlIjoiUk9MRV9VU0VSIiwiZXhwIjoxNjY3NTYzNTU1LCJlbWFpbCI6InBrODI5NEBuYXZlci5jb20ifQ.e3At2tXiH3PuFhl9oCBtyGTLf7IH2gwQQ13YJeAsiuc

4. http://localhost:8080/user/list 로 접속 가능!
{"userList":[{"id":1,"createdAt":"2022-10-05T21:05:55.164","updatedAt":"2022-10-05T21:05:55.165","isEnable":true,"email":"pk8294@naver.com","pw":"$2a$10$zW.aZWNlFy659j8bUjbPCeVyx.dkhRsnM3x02oMJOPMSoST3z339K","role":"ROLE_USER"}]}
token이 authenticated 되었다는 것 과, ROLE_USER로 authorized된 것을 확인 가능하다.



	
	

---
session vs token


session은 서버에서 보관해야해서 확장하기 어려움.
토큰은 각 서버단 token key 문자열만 기억하고 있으면 되서 stateless. -> 확장하기 용이 

그 외에, token은 내용은 암호화 레벨 낮은데, 보낸 사람이 100% 맞는지 검증하는데 쓰는거라 
쿠키나 세션같은애들 보낼 때 암호화 보안취약점 걱정덜어줌.

이 보안 문제 때문에 쿠키/세션 사용하는 곳은 CORS 정책으로 제한하는데,
token기반은 이부분에 대해 제약 덜 받기 때문에 다양한 디바이스, 도메인으로부터 온 요청을 토큰 유효성 검사 가능 

	
	
	

---
token기반 인증 구현방법 2가지 

1) 첫번째 방법 (위 포스팅과 동일한 방법, 인터셉터 이용한 방식)
- 스프링 시큐리티 로그인 로직에서 사용자 정보로 인증 및 토큰 발급.
- 인터셉터로 토큰 인증 수행.

2) 두번째 방법(일반 컨트롤러와 토큰을 이용한 방법)
- 토큰을 발급받는 별도에 컨트롤러 생성하여, 해당 컨트롤러를 통해 토큰 발급.
- 스프링 시큐리티에 토큰인증 커스텀 필터를 추가하여 스프링 시큐리티를 통해 인증 수행.



이 프로젝트는 첫번째 방법으로 구현되었으나, 두번째 방법이 더 정석적. 
인증(authentication, 검증되지 않은 요청)은 아무래도 스프링 컨텍스트 바깥인 웹 컨텍스트에서 필터로 해결하는게 좋은 것 같고,
인가(authorization)는 이미 인증받은 후니까 스프링 컨텍스트 안에서 인터셉터로 처리하는게 좋을듯?








---
authentication process(jwt token 생성 과정) 


1. 로그인 요청 -> CustomAuthenticationFilter로 아이디, 비밀번호 기반 UserPasswordAuthenticationToken 발급.(유효성 검사는 프론트 단에서) (이 필터는 UsernamePasswordAuthenticationFilter 이전 단계에 등록) 
2. HttpRequest에 POST로 온 id,pw를 기반으로 UserPasswordAuthenticationToken를 발급함. 
3. UsernamePasswordToken을 Authentication Manager에게 전달
4. UsernamePasswordToken을 Authentication Provider에게 전달
5. UserDetailsService로 조회할 아이디를 전달
6. 아이디를 기반으로 UserDetailsServiceImpl에서 DB에서 데이터 조회(UserDetails 타입을 상속받은 MyUserDetails 이용) 
7. CustomAuthenticationProvider.authenticate()에서 인증 처리 후 인증된 토큰을 AuthenticationManager에게 반환
8. AuthenticaitonProvider에서 인증이 완료된 UsernamePasswordAuthenticationToken을 AuthenticationFilter로 반환 -> AuthenticationFilter에서는 LoginSuccessHandler로 전달
9. LoginSuccessHandler로 넘어온 요청은 /user/loginSuccess로 redirect -> 전달받은 Authentication 정보를 활용해 TokenUtils로 jwt토큰 생성 후 HttpResponse Header에 담아 반환 


---
이 프로젝트가 세션 베이스 인증 프로젝트와 다른 점 

큰 틀은 비슷한데,
jwt토큰 쓴다는 점 외에 
session은 인증 다 끝나면, spring security context에 session정보 저장해서, @principal로 유저 정보 꺼내먹었는데,
얜 유저정보 따로 저장을 안해두네? 



