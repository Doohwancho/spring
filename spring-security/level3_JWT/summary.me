---
concepts

how session works? 
what is cia?
what is jwt?



---
Q1. pom.xml에서 디펜던시에

<dependency>
	<groupId>com.auth0</groupId>
	<artifactId>java-jwt</artifactId>
	<version>3.4.1</version>
</dependency>

이렇게 추가되있는데, 얘가 jwt 라이브러린가? 





JwtAuthorizationFilter.java에서 

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;

String username = JWT.require(Algorithm.HMAC512(JwtProperties.SECRET)).build().verify(token)
				.getClaim("username").asString();

이렇게 쓰는듯? 

jwt이라는게 암호화 알고리즘인가? 


---
Q2. jwt가 뭐지?

자바 웹 토큰의 약자인가?
웹 토큰이면 cookie랑 비슷한 개념인건가?

유저가 로그인 성공하면, 서버가 유저한테 쿠키 보내주고,
유저는 이때부터 계속 서버로 쿠키 보내는데,
그걸 바탕으로 서버가 세션 관리하는?

이건 그냥 쿠키 & 세션이잖아. 
뭐가 다른데? 


---
Q3. CORS가 뭐지?



---
Q4. CSRF가 뭐지?


---
Q5. JwtAuthorizationFilter? what is authorization anyway?

authorization은 회원가입할 때, ROLE_USER, ROLE_MANAGER, ROLE_ADMIN 권한부여하는거 아냐? 

JwtAuthorizationFilter 보니까, 유저가 서버한테 HttpRequest보낼 때, 헤더에 jwt토큰 담아서 보내면,
서버가 복호화 해서 서버가 가지고 있는 토큰이랑 맞나 보네?


근데 이거 세션 아님?

암호화가 들어간 세션인건가? 
세션에 암호화가 없었나? 
쿠키 & 세션부터 봐야할 것 같다. 



---
Q6. JwtAuthenticationFilter? what is authentication anyway?


일단 Authentication은 로그인했다고 주장하는 이놈이 진짜 유저가 맞는지 확인하는거 아닌가?
JwtAuthorizationFilter 보면, 로그인 주장하는 유저가 보낸 id,pw를 헤더에 유저정보로 받아서
authenticationManager.authenticate() 하는데,
쟤가 내부적으로 어떻게 돌지?

그냥 유저 정보 담은 jwt토큰 넣어주면 장땡인건가? 




---
what is cookie?


HttpRequest는 stateless하잖아?
client->server 로 http request보낼 때 마다, 매번 같은 정보를 반복해서 새롭게 보내줘야 한단말야?

GET /user/info 이런 애들은 HttpRequest에 와도 괜찮아. 
근데 만약에 홈페이지 언어 설정이 러시아어로 했으면,
페이지 이동해서 GET HttpRequest 보낼 때 마다, url에 ?siteLang=Russian 이러면 좀 곤란하잖아?

유튜브볼 때, 속도 1.5배 설정했다고 하자.
다음영상 클릭할 때 마다, youtube/?speed=1.5 매번 url에 넣어서가면, url도 지저분해지고, controller도 지저분해지잖아.

그러니까 http는 stateless한데, 
state를 유지시켜줘야할 때,
클라이언트에서 저런 언어나 배속을 브라우저에 .txt로 저장한 다음에, 서버에 HttpRequest보낼 떄 마다 HttpHeader에 쿠키로 담아 보내는거지.   


보통 쿠키 언제 쓰냐면,
1. 인터넷 쇼핑 장바구니
2. 재방문시 아이디 자동입력 
3. 오늘 이 창을 다시보지 않기 설정 


---
what is session?


그럼 세션은 뭐냐?
로그인 한 후 페이지 넘어갈 때마다, 다시 로그인 하기 귀찮잖아?
(왜냐면 http는 stateless하니까)

그러면 유저가 로그인했다라는 정보를 쿠키에 담아 보내면 매번 유저 인증 안해도 되겠네?
근데 문제가, 해커가 쿠키에 {userId: xxx, userLogin: true} 이렇게 담아서 보내면 로그인도 안했는데 로그인 처리 되겠지? 
서버 측에서 해당 유저가 진짜 로그인한 유저가 맞는지 아님 해커 사쿠란지 authenticate해야하잖아?

그래서 유저가 로그인 성공하면, 유저한테 쿠키로 JSESSION이라는 걸 보내줌과 동시에 
서버에서 JSESSION 값을 static 하게 관리함(그래야 .equals() 비교연산 빠르게 하지 언제 db io 기다리고 앉아있음)

그래서 진짜 유저가 보내는 JSESSION은 서버측이 보관하는 JSESSION과 일치하기 때문에 authenticate 성공하고,
해커가 보내는 사쿠라 JSESSION은 서버측이 보관하는 JSESSION list에 없기 때문에 authenticate 실패한다.

(물론 세션도 해커가 JSESSION을 중간에 가로채면 말짱 꽝이라는 문제가 있기에, jwt같은 더 나은 보안방법이 등장함) 


---
How session works?

client -> Server
유저가 첫 로그인 성공하면, 서버는 HttpResponse에 쿠키에 세션(ex. { setCookie: {JSESSION: "XREAGEASEG-ASDGASDGSDF"}})을 담아 클라이언트에게 준다. 
서버 본인도 {JSESSION: "XREAGEASEG-ASDGASDGSDF"}를 서버에서 보관하면서. 

그 이후 클라이언트가 서버에 HttpRequest 할 때마다, HttpHeader에 세션(ex. { setCookie: {JSESSION: "XREAGEASEG-ASDGASDGSDF"}})을 담아서 보낸다. 
클라이언트가 HttpRequest를 보낼 때 마다, 해당 http header안에 세션과 서버가 보관하는 세션과 비교해서,
나 로그인했어! 라고 주장하는 유저가 valid한지, 해커는 아닌지 authenticate한다.

만약에 세션이 없었다면, 유저인증이 필요한 페이지를 접속할 때마다, 
http는 stateless하기 때문에, 유저 id,pw가 맞는지 유저 디비에서 계속 검증해야 했어야 했는데,
db io필요 없이, 서버에서 보관하는 세션 값만 .equals()하면 되서 검증이 빠르고 실용적이다.(세션은 서버 static memory에서 보관하는 듯 하다)  


만약 다른 유저가, 세션에 아무 값이나 담아서 내면, (ex. { setCookie: {JSESSION: "PWERIWPERUWIER-KLKJSKDGJ"}})
서버에서 보관하는 세션은 {JSESSION: "XREAGEASEG-ASDGASDGSDF"} 얘 뿐인데,
처음보는 {JSESSION: "PWERIWPERUWIER-KLKJSKDGJ"} 얘가 왔네?
-> 사쿠라네? 
 
 
---
session은 언제 날라감?


1. 서버에서 보관하던 세션을 강제로 지운 경우
2. 클라이언트 유저가 브라우저 닫은 경우.
3. 일정 시간 지나면 서버쪽에서 세션 삭제함(보통 30분) 



---
session의 단점


동시 접속자 수가 100만명인 앱이 있다고 하자.
하나의 서버에서 100만명 다 감당 못하니까, 서버1,2,3 나눠놨다.

서버 1에서 유저가 로그인했는데, 
서버 1이 너무 바쁜 것 같아서, 로드 밸런서가 요청을 서버2로 보냈다.
근데 해당 유저 세션이 서버1에 있지 서버2엔 없는데, 어떻게 authenticate해? 



이걸 해결하는 방법 1: sticky server
처음 요청한 서버로 계속 유저를 보내는 것.
-> 귀찮은 짓 

이걸 해결하는 방법2: 서버1에서 유저 세션 생성되면, 다른 서버한테 다 카피시키기 
-> 개오바

방법3: 모든 서버에 세션을 db 한군데에서 통합관리
근데 세션 장점이 db io 안하고 서버 static 메모리에서 .equals()해서 빠르다인데, 이 장점을 잃어버리네?
그럼 유저가 로그인해서 이리저리 돌아다닐텐데, 그 속도가 다 느려지겠네?


방법4: 그래서 메모리 서버를 쓴다.
메모리 서버는 하드는 없고 램만 있다.(대표적으로 Redis쓴다)
db io안하니까 빠르다.

 


---
what is cia? (보안의 3요소) 




근데 만약에 해커가,
첫 유저가 서버에서 세션 받을 때나, 서버로 세션을 보낼 때, ({JSESSION: "XREAGEASEG-ASDGASDGSDF"})
http request를 sniffing해서, header 까봐서 세션 훔친 다음에,
해커가 마치 저 유저인 것 마냥 서버에게 보내서 로그인 해버려서 돈 빼갈 수도 있잖아?

이건 어떻게해?


CIA = confidential, integrity, availability

1. confidential = 해커가 중간에 가로채면(sniffing, spoofing, etc), 기밀성이 깨짐
2. integrity = 가로채서 내용 변경하거나 파괴하면, 무결성이 깨짐
3. availability = authenticate된 유저가 언제나 서버에 접속 가능해야 함. 근데 서버가 DDOS공격 받아서 다운되면, 가용성이 깨짐.


보안에서 이 3가지 지키는게 핵심.

이 3가지 어떻게 지킴?

해커가 노리는 저 object를 암호화 하면 됨.
그러면 기밀성도 지켜지고,
암호화 됬으니 내용을 파괴하지 않는이상 변경 할 수 없고(한다해도 서버에서 바뀐지 아니까 걸를 수 있다)
서버가 디도스만 안당하면 오케이.


여튼 암호화 하면 CIA를 지킬 수 있다는건데,
암호화 하려면 키가 필요하지?
서버가 암호화 해서 유저한테 세션을 보냈다고 치자.
근데 해커가 그 패킷이랑 키 둘 다 훔칠 수 있잖아?
열쇠 전달 어떻게 하지? -> 문제 1



그리고 client - hacker - server 에서,
클라이언트가 서버로부터 열쇠 전달 잘 받았다고 해도, 
client -> server 로 HttpRequest보낼 때,
중간에 해커가 탈취해서, 보낸 사람을 client가 아닌 다른 사람으로 쓸 수 있잖아?
그러면 server가 그걸 보고, 어? 이거 보낸 사람 client가 아니네? 하고 버릴 수 있잖아?
그러면 이 HttpRequest, HttpResponse가 client, server가 보냈다는걸 어떻게 증명하지? -> 문제 2



---
what is RSA?


키를 두개 써서 암호화하자!
1. public key
2. private key

공개키와 비밀키는 대칭이다.
공개키로 잠긴 문서는 비밀키로만 unlock 가능하다.

클라이언트, 서버 각각 공개키, 개인키 들고있자!




prerequisites)
1. 클라이언트, 서버 둘 다 '각자' 대칭키들(공개키 + 비밀키)을 만든다.
(공개키로 암호화 한 건, 그에 대칭되는 비밀키로만 복호화 가능하다.)
2. 클라이언트는 해커, 서버를 포함한 모두에게 client.public key를 뿌린다.
3. 서버도 해커, 클라이언트를 포함한 모두에게 server.public key를 뿌린다. 


그 결과,
=====================================================================
client -> hacker -> server
(client.public key)  ->  (client.public key)  -> (server.public key)
(client.private key) ->  (server.public key)  -> (server.private key)
(server.public key)                              (client.public key) 
=====================================================================



case1) client -> server
client는 보낼 문서를 client.public key로 암호화해서 서버한테 보낸다. (그러면 이 문서는 client.private key로 밖에 복호화 못함) 
만약 해커가 중간에 문서를 탈취한다고 하더라도, 
client.public key로 암호화된 문서는 client.private key로 밖에 풀지 못하는데, 


해커가 가지고 있는건, 
1. client.public key
2. server.public key 
밖에 없다.

(만약 client.private key를 얻고 싶다면, apple팀의 보안 + 안티 바이러스 프로그램 등의 보안 방화벽을 뚫고 클라이언트를 해킹해야 하는데, 
기존에 HttpRequest packet sniffing보다 훨씬 난이도가 올라가므로, 보안이 더 좋아졌다 볼 수 있겠다.)



Q. 근데 중간에 해커가 문서 탈취하고 다시 만드는 방법은 없나?

A. 불가능. 왜냐하면, 해커가 중간에 문서 탈취하고 다시 문서 만들어서 암호화 할려는데, client.private key 없잖아? 

 

Q. 근데 client->server 보낼 때, client.public key로 잠구지 말고,
server.public key로 잠구면 안되나?
그럼 client, server 서로 위험하게 private key 교환 안해도 되잖아?

A. 응 안돼~. 
그럼 해커가 중간에 너 패킷 탈취한 후, 열어볼 순 없겠지. server.private key가 없으니까.
근데 너꺼 패킷 버린 다음에, sender: 너로 적은 다음, 완전 새로운 내용이 적힌 패킷 새로 만들어서 
server.public key로 암호화 해서 보낼 수도 있잖아?



Q. 해커는 탈취 못한다고 치자. 그런데 서버도 문서 받고 복호화 하려면 client.private key 필요한데 없잖아?

그래서 위에처럼 통신하기 전에, 선행조건으로 
client.private key를 서버로, server.private key는 client로 보내야 한다. 안전하게.
어떻게 하지?



처음으로 돌아와서,
클라이언트, 서버가 각각 대칭키 만들면, 아래처럼 되잖아?

=====================================================================
client -> hacker -> server
(client.public key)  ->  (client.public key)  -> (server.public key)
(client.private key) ->  (server.public key)  -> (server.private key)
(server.public key)                              (client.public key) 
=====================================================================


서버가 server.private key를 클라이언트로 보내고 싶다고 하자.
client.public key로 server.private key를 암호화 함.
그럼 이건 client.private key로밖에 복호화 할 수 없겠지?
근데 client,hacker,server 중 client.private key를 가진 사람은 client 뿐이지?

이 방식으로 server->client 에게 server.private key보내면 안전하게 보낼 수 있음.

같은 방식으로 client->server에게 client.private key 보내는 방식도 마찬가지. 





case2) server -> client
server는 보낼 문서를 client.public으로 암호화 해서 client에게 보낸다.
역시 해커는 저 문서를 중간에 탈취해도, client.private key가 없기 때문에, 문서 조작, 변경 할 수 없다.




---
what is 전자서명?


개인키로 잠군게 아니라 공개키로 잠군게 전자서명.
내용 탈취 상관없고, client->server 보낼 때, client가 보냈다, 'who'를 검증할 때 쓰이는 방법.




client -> server 시에,

=====================================================================
client -> hacker -> server
(client.public key)  ->  (client.public key)  -> (server.public key)
(client.private key) ->  (server.public key)  -> (server.private key)
(server.public key)                              (client.public key) 
=====================================================================

이니까, 클라이언트는 client.public key로 암호화 하고, 서버는 client.private key로 복호화한다 그랬잖아?

근데, 클라이언트가 client.private key로 암호화 하고 보내는 방식이 전자서명.

왜? 위에서 해커가 client.public key로 내용 볼 수 있다 그랬잖아?

근데 전자서명은 내용이 중요한게 아니라, client가 보냈다라는걸 증명할 때 사용.

hacker가 중간에 client.public key로 내용을 바꾸던 말건, 어쨌든 그 문서가 client.public key로 복호화 된다는건,
client.private key를 가지고 있는 클라이언트가 보냈다라는게 확실하잖아?




---
what is RFC document?



http는 미국의 벨 연구소에서 만듬. 여기서 www만듬.
이 연구소 안에 내부망에 컴퓨터 n대가 그래프처럼 연결되어 잘 사용 중이었음.

근데 MIT대학 내부망 안 컴퓨터랑 델 연구소 내부망 컴퓨터랑 통신하고 싶은데, 
프로토콜이 달라서 통신이 안됨.


벨 연구소랑 MIT 대학 내부망 연결할 때, 
ip주소 몇에 포트번호 몇에 어떤 규칙으로 통신할 때 패킷 보내줘!
= 약속을 적어놓은 문서 = RFC 1번 문서.(프로토콜)

시간이 흘러 다른 내부망과 연결할 떄, 규칙을 만듬. 그게 RFC2번문서.
그렇게 RFC문서가 n번으로 계속 쌓임.
이렇게 만들어진게 www, world wide web, internet.

인터넷의 프로토콜, http protocol은 저 RFC의 n번째 문서에서 기인함.



기존 연결된 내부망에 새로운 내부망이 편입되려면,
기존 RFC 규칙에 부합해야 함.
 

여튼 jwt, json web token은 RFC 7519 프로토콜에 의존함.






