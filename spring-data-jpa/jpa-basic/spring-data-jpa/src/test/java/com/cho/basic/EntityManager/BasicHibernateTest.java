package com.cho.basic.EntityManager;

import com.cho.basic.연관관계매핑.OneToOne.MemberRepository;
import com.cho.basic.연관관계매핑.OneToOne.Member1;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ExtendWith(SpringExtension.class)
@DataJpaTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
class BasicHibernateTest {

    @Autowired
    private MemberRepository memberRepository;

    private Member1 member;

    /**
     * initinate Member Object into database Table
     *
     * Hibernate:
     *
     *     create table member (
     *        seq bigint generated by default as identity,
     *         email varchar(255) not null,
     *         password varchar(255) not null,
     *         user_id varchar(255) not null,
     *         primary key (seq)
     *     )
     * Hibernate:
     *
     *     alter table member
     *        drop constraint if exists UK_mbmcqelty0fbrvxp1q58dn57t
     * Hibernate:
     *
     *     alter table member
     *        add constraint UK_mbmcqelty0fbrvxp1q58dn57t unique (email)
     * Hibernate:
     *
     *     alter table member
     *        drop constraint if exists UK_a9bw6sk85ykh4bacjpu0ju5f6
     * Hibernate:
     *
     *     alter table member
     *        add constraint UK_a9bw6sk85ykh4bacjpu0ju5f6 unique (user_id)
     */

    @BeforeEach
    void setUp() {
        // given
        member = Member1.builder()
                .name("test")
                .build();
        System.out.println("START-SAVE========================================================================");
        memberRepository.save(member);
        System.out.println("END-SAVE========================================================================");

        //console.log
        /**
         * START-SAVE========================================================================
         * Hibernate:
         *     select
         *         member0_.seq as seq1_0_0_,
         *         member0_.email as email2_0_0_,
         *         member0_.password as password3_0_0_,
         *         member0_.user_id as user_id4_0_0_
         *     from
         *         member member0_
         *     where
         *         member0_.seq=?
         * Hibernate:
         *     insert
         *     into
         *         member
         *         (seq, email, password, user_id)
         *     values
         *         (null, ?, ?, ?)
         * END-SAVE========================================================================
         *
         */
    }

    @Test
    @DisplayName("회원 이메일 조회")
    void findByEmail() {
        // then
        System.out.println("START-QUERY========================================================================");
        Assertions.assertNotNull(memberRepository.findById(member.getId()));
        System.out.println("END-QUERY========================================================================");

        //console.log
        /**
         * START-QUERY========================================================================
         * Hibernate:
         *     select
         *         member0_.seq as seq1_0_,
         *         member0_.email as email2_0_,
         *         member0_.password as password3_0_,
         *         member0_.user_id as user_id4_0_
         *     from
         *         member member0_
         *     where
         *         member0_.email=?
         * END-QUERY========================================================================
         */
    }
}
