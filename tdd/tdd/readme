
---
Mockito


why?

service -> repository -> db io
db io가 부하 부담, 속도 부담, unit test로 clear cut하게 내가 원하는 부분만 테스트 하고 싶어서 사용.

ex. service단 main logic만 테스트 하고 싶다. repository에 db io 말고.
그럼 repository 에 db io하는 부분 mock 해서, 내가 원하는 output 나오도록 mock.
이 임의의 input을 main logic에 넣어, 내가 원하는 output이 나오는지 테스트.


a. test double

1. dummy
2. mock
3. stub
4. spy
5. fake


---
a-1. Dummy

빈 가짜 객체


---
a-2. @Mock

가짜 객체.
해당 객체에 메서드를 반환하면, constant면 0, 객체면 null, boolean이면 false 반환.
보통 desired output을 stubbing으로 주입하고 사용함.




@InjectMock

만약 service에 @Mock api1, @Mock api2, @Spy repository가 있다면,
@InjectMock service를 사용하면, service의 생성자에 api1, api2, repository가 주입됨.



---
a-3. Stubbing

mock 객체에 desired output 주입할 때 사용.


a-3-1. when first stubbing
when().thenReturn()
when().thenThrow()
when().thenAnswer()
when().thenCallRealMethod()


a-3-2. when later stubbing
doReturn().when()
doThrow().when()



---
a-4. @Spy

@Mock과 비슷하지만, 실제 객체를 사용함.
해당 객체에 메서드를 반환하면, 실제 객체의 메서드를 호출함.
보통 실제 객체를 사용하고 싶지만, 특정 메서드만 stubbing으로 주입하고 싶을 때 사용함.



---
a-5. Fake

mock+stubbing으로 when().doReturn("desired output"); 하는 식 말고,
기존 repository를 상속받아서, 실제 repository의 메서드를 override해서 desired output을 주는 방식.




---
verify()

1. 메서드 몇번 호출함?
2. 메서드 호출 순서 맞음? 다른 메서드가 불려진 것 아님?
3. 메서드 호출 시 파라미터 맞음?